{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NDIcalc-vis-matlab","text":""},{"location":"#about","title":"About","text":"<p>This package contains a set of database document types and ndi.calculator objects for performing analysis of responses to visual stimulation. It requires and depends on the Neuroscience Data Interface, NDI.</p>"},{"location":"#installation","title":"Installation","text":"<p>Check out the NDI Installation Guide.</p>"},{"location":"#help-and-support","title":"Help and Support","text":"<p>Use the issue tracker to submit questions, bugs, and issues.</p>"},{"location":"#financial-support","title":"Financial Support","text":"<p>Supported by the NIH BRAIN Initiative informatics group, grant MH114678.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Anyone with a GitHub account can contribute. Please see the guidelines below!</p>"},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":"<p>If you have code that you would like to write, do the following.</p> <ol> <li> <p>Press the Fork button in the upper-right corner of the NDIcalc-vis-matlab GitHub repository to make a copy of NDIcalc-vis-matlab in your own GitHub space.</p> </li> <li> <p>Make your changes to NDIcalc-vis-matlab.</p> </li> <li> <p>Commit your changes back to your fork.</p> </li> <li> <p>Finally, issue a Pull Request on GitHub from your fork. The request will be received by the NDI development team for integration.</p> </li> </ol>"},{"location":"gemini-contributed/","title":"Documentation: NDIc-vis-matlab Add-on for NDI","text":""},{"location":"gemini-contributed/#1-introduction","title":"1. Introduction","text":"<p>NDIc-vis-matlab is an add-on package for the Neuroscience Data Interface (NDI) framework, implemented in Matlab. It provides a suite of specialized analysis tools, packaged as NDI Calculators (<code>ndi.calculator</code>), primarily focused on common analyses in visual neuroscience and electrophysiology.</p> <p>These calculators automate the process of analyzing data stored within an NDI session (like spike times, stimulus presentations, and basic responses) and store the detailed results, including statistical significance and model fits, back into the NDI database as new, queryable NDI documents. The add-on also typically provides built-in methods for visualizing the results of these calculations.</p>"},{"location":"gemini-contributed/#2-core-concept-ndi-calculators","title":"2. Core Concept: NDI Calculators","text":"<p>The tools within NDIc-vis-matlab are built upon the core NDI concept of the <code>ndi.calculator</code> class. Key features of this approach include:</p> <ul> <li>Automation: Calculators encapsulate specific analysis workflows.</li> <li>Data Provenance: Output documents automatically store dependencies on the input documents used (e.g., which neuron element, which stimulus presentation, which tuning curve document).</li> <li>Standardization: Results are stored in defined NDI document formats (specified by JSON schemas), making them consistent and queryable.</li> <li>Modularity: Calculators can be chained together, with the output of one serving as input for another.</li> <li>Integration: They operate directly on data within an NDI session object.</li> </ul>"},{"location":"gemini-contributed/#3-general-workflow-with-ndic-vis-matlab-calculators","title":"3. General Workflow with NDIc-vis-matlab Calculators","text":"<p>Using a calculator from this add-on typically involves the following steps in Matlab:</p> <ol> <li>Instantiate the Calculator: Create an instance of the desired calculator class, passing your NDI session object (<code>S</code>).     <code>matlab     % Example: Instantiate the orientation/direction tuning calculator     oridir_calc = ndi.calc.vis.oridir_tuning(S);</code></li> <li>Prepare Input Parameters: Determine the input parameters needed for the <code>calculate</code> method. This always includes a <code>depends_on</code> structure specifying the IDs of the input NDI documents. You might also need <code>input_parameters</code> specific to the analysis.<ul> <li>You can often use the calculator's <code>default_search_for_input_parameters()</code> and <code>search_for_input_parameters()</code> methods to automatically find suitable input documents based on default queries (e.g., finding the right type of <code>stimulus_tuningcurve</code> document). <code>matlab % Example: Find potential input parameters using default query default_params = oridir_calc.default_search_for_input_parameters(); % Refine query if needed, e.g., restrict to a specific element_id element_doc = S.database_search(ndi.query('element.name','exact_string','neuron_001','')); % Find your element if ~isempty(element_doc)    default_params.query.query = default_params.query.query &amp; ndi.query('','depends_on','element_id',element_doc{1}.id()); end % Search for specific inputs matching the (potentially refined) query input_params_list = oridir_calc.search_for_input_parameters(default_params);</code></li> </ul> </li> <li>Run the Calculator: Execute the analysis using the <code>run</code> method. You typically pass the specific input parameters structure found in the previous step. The <code>'Replace'</code> option ensures existing results for the same inputs are replaced.     <code>matlab     % Example: Run the calculator for the first found input parameter set     if ~isempty(input_params_list)         output_docs = oridir_calc.run('Replace', input_params_list{1});         disp(['Calculator generated ' int2str(numel(output_docs)) ' output document(s).']);     else         disp('No suitable input documents found to run the calculator.');     end</code></li> <li>Find Output Documents: Locate the newly created output document(s). You can search by type (<code>_calc</code> document name) and/or by dependency on the input documents, or use the list returned directly by the <code>run</code> command. Alternatively, use the calculator's <code>search_for_calculator_docs</code> method.     <code>matlab     % Example: Find output docs based on the input stimulus_tuningcurve_id     stimulus_tuningcurve_id = did.db.struct_name_value_search(input_params_list{1}.depends_on,'stimulus_tuningcurve_id');     q_out = ndi.query('','isa','oridirtuning_calc') &amp; ndi.query('','depends_on','stimulus_tuningcurve_id',stimulus_tuningcurve_id);     found_output_docs = S.database_search(q_out);</code></li> <li>Examine and Visualize Results: Load the output document and access its properties (as shown in Tutorial 5 for <code>oridirtuning_calc</code>). Use the calculator's built-in <code>plot</code> method for visualization.     <code>matlab     % Example: Plot the result from the first output document found     if exist('found_output_docs','var') &amp;&amp; ~isempty(found_output_docs)         figure; % Create a new figure         axes_h = gca; % Get axes handle         oridir_calc.plot(found_output_docs{1}, 'axes_handle', axes_h);     end</code></li> </ol>"},{"location":"gemini-contributed/#4-available-calculators-in-ndic-vis-matlab","title":"4. Available Calculators in NDIc-vis-matlab","text":"<p>Based on the provided code, the following calculator classes are available (assuming they reside in an <code>ndi.calc.vis</code> namespace):</p> Calculator Class Name Purpose Primary Input Dependency(ies) Output Document Type Plot Method? <code>ndi.calc.vis.contrast_sensitivity</code> Calculates contrast sensitivity curves <code>element_id</code>, <code>stimulus_presentation_id</code> (finds <code>stimulus_response_scalar</code>, <code>contrast_tuning</code> internally) <code>contrastsensitivity_calc</code> Yes <code>ndi.calc.vis.contrast_tuning</code> Fits Naka-Rushton models to contrast data <code>stimulus_tuningcurve_id</code> (contrast) <code>contrasttuning_calc</code> Yes <code>ndi.calc.vis.hartley_calc</code> Performs Hartley reverse correlation <code>element_id</code>, <code>stimulus_presentation_id</code> (Hartley) <code>hartley_calc</code> Yes <code>ndi.calc.vis.oridir_tuning</code> Analyzes orientation/direction tuning <code>stimulus_tuningcurve_id</code> (angle/direction) <code>oridirtuning_calc</code> Yes <code>ndi.calc.vis.spatial_frequency_tuning</code> Analyzes spatial frequency tuning <code>stimulus_tuningcurve_id</code> (spatial frequency) <code>spatial_frequency_tuning_calc</code> Yes <code>ndi.calc.vis.speed_tuning</code> Analyzes speed tuning (SF+TF interaction) <code>stimulus_tuningcurve_id</code> (SF &amp; TF) <code>speedtuning_calc</code> Yes <code>ndi.calc.vis.spike_shape</code> Calculates average spike waveforms over time <code>element_id</code> <code>spike_shape_calc</code> Yes <code>ndi.calc.vis.temporal_frequency_tuning</code> Analyzes temporal frequency tuning <code>stimulus_tuningcurve_id</code> (temporal frequency) <code>temporal_frequency_tuning_calc</code> Yes"},{"location":"gemini-contributed/#5-key-output-document-fields-examples","title":"5. Key Output Document Fields (Examples)","text":"<p>The <code>_calc</code> documents store rich information. Refer back to the documentation snippets provided earlier for full details. Here are highlights for a few common types:</p> <p><code>oridirtuning_calc</code> (via <code>orientation_direction_tuning</code> property):</p> <ul> <li><code>tuning_curve</code>: Mean, stderr, individual responses per direction.</li> <li><code>significance</code>: p-values for visual responsiveness and tuning significance (ANOVA).</li> <li><code>vector</code>: Fitless measures like preferred angles, circular variance, dot product significance.</li> <li><code>fit</code>: Double Gaussian fit parameters (<code>Rsp</code>, <code>Rp</code>, <code>theta_pref</code>, <code>sigma</code>, <code>Rn</code>), derived preferred angles, tuning width (HWHH), orientation/direction indices.</li> </ul> <p><code>contrasttuning_calc</code> (via <code>contrast_tuning</code> property):</p> <ul> <li><code>tuning_curve</code>: Mean, stderr, individual responses per contrast level.</li> <li><code>significance</code>: p-values for visual responsiveness and tuning significance (ANOVA).</li> <li><code>fitless</code>: Interpolated C50 value.</li> <li><code>fit</code>: Parameters, fit values, R^2, empirical C50, sensitivity, etc., for 3 different Naka-Rushton model variations (RB, RBN, RBNS).</li> </ul> <p><code>spatial_frequency_tuning_calc</code> / <code>temporal_frequency_tuning_calc</code> (via <code>spatial_frequency_tuning</code> / <code>temporal_frequency_tuning</code> properties):</p> <ul> <li><code>tuning_curve</code>: Mean, stderr, individual responses per frequency.</li> <li><code>significance</code>: p-values for visual responsiveness and tuning significance (ANOVA).</li> <li><code>fitless</code>: Measures like preferred frequency (Pref), low/high cutoff frequencies (L50/H50), bandwidth, low/high pass indices.</li> <li><code>fit_dog</code> / <code>fit_movshon</code> / <code>fit_movshon_c</code>: Parameters, fit values, R^2, and derived Pref/L50/H50/bandwidth for different fit models (Difference-of-Gaussians, Movshon).</li> <li><code>abs</code>: Repeats fitless and fit measures for the absolute value of the responses.</li> </ul>"},{"location":"gemini-contributed/#6-associated-document-types-defined","title":"6. Associated Document Types Defined","text":"<p>This add-on defines the primary calculator output documents (e.g., <code>contrastsensitivity_calc</code>, <code>contrasttuning_calc</code>, <code>hartley_calc</code>, <code>oridirtuning_calc</code>, <code>spatial_frequency_tuning_calc</code>, <code>speedtuning_calc</code>, <code>spike_shape_calc</code>, <code>temporal_frequency_tuning_calc</code>).</p> <p>It also defines several intermediate or base document types that are likely used as superclasses or components within the calculator outputs (e.g., <code>contrast_tuning</code>, <code>hartley_reverse_correlation</code>, <code>reverse_correlation</code>, <code>spatial_frequency_tuning</code>, <code>speed_tuning</code>, <code>temporal_frequency_tuning</code>). Understanding these base types can help in interpreting the structure of the final <code>_calc</code> documents.</p>"},{"location":"gemini-contributed/#7-illustrative-example-orientationdirection-tuning","title":"7. Illustrative Example (Orientation/Direction Tuning)","text":"<p>```matlab % --- Assumes S is a valid NDI session object ---</p> <p>% 1. Instantiate calculator oridir_calc = ndi.calc.vis.oridir_tuning(S);</p> <p>% 2. Find input parameters (e.g., for a specific element) element_doc = S.database_search(ndi.query('element.name','exact_string','neuron_001','')); if isempty(element_doc), error('Element not found'); end; element_id = element_doc{1}.id();</p> <p>params_query = oridir_calc.default_search_for_input_parameters(); params_query.query.query = params_query.query.query &amp; ndi.query('','depends_on','element_id',element_id); input_params_list = oridir_calc.search_for_input_parameters(params_query);</p> <p>if isempty(input_params_list)     error('No suitable stimulus_tuningcurve document found for this element.'); end input_parameters = input_params_list{1}; % Use the first found input set</p> <p>% 3. Run the calculator disp('Running oridir_tuning calculator...'); output_docs = oridir_calc.run('Replace', input_parameters); disp('Calculation complete.');</p> <p>if isempty(output_docs)     error('Calculator did not produce an output document.'); end oridir_result_doc = output_docs{1};</p> <p>% 4. (Optional) Find the output document again via search % q_out = ndi.query('','isa','oridirtuning_calc') &amp; ... %         ndi.query('','depends_on','stimulus_tuningcurve_id', input_parameters.depends_on(1).value); % found_docs = S.database_search(q_out); % oridir_result_doc = found_docs{1};</p> <p>% 5. Visualize the result disp('Plotting results...'); figure; axes_h = gca; oridir_calc.plot(oridir_result_doc, 'axes_handle', axes_h); title('Orientation/Direction Tuning Result'); % Add a custom title if needed</p> <p>% 6. Examine specific fields (optional) ot_data = oridir_result_doc.document_properties.orientation_direction_tuning; disp(['Fit Direction Preference: ' num2str(ot_data.fit.direction_angle_preference)]); disp(['Fit HWHH: ' num2str(ot_data.fit.hwhh)]);</p>"},{"location":"installation/","title":"Installation:","text":"<ol> <li>Install NDI</li> </ol> <p>See the NDI Installation Guide and check out its requirements.</p> <ol> <li> <p>In a terminal or DOS shell, use the function <code>cd</code> to navigate to your user account Matlab documents directory. On a Mac, for example, it is <code>/Users/yourusername/Documents/MATLAB/</code>. Then, navigate to the <code>tools</code> directory within.</p> </li> <li> <p>Finally, clone this repository using <code>git clone https://github.com/VH-Lab/NDIcalc-vis-matlab</code>.</p> </li> </ol>"},{"location":"documents/calc/contrastsensitivity_calc/","title":"contrastsensitivity_calc (ndi.document class)","text":""},{"location":"documents/calc/contrastsensitivity_calc/#class-definition","title":"Class definition","text":"<p>Class name: contrastsensitivity_calc Short name: contrastsensitivity_calc Superclasses: base</p> <p>Definition: $NDICALCDOCUMENTPATH/calc/contrastsensitivity_calc.json Schema for validation: $NDICALCSCHEMAPATH/calc/contrastsensitivity_calc_schema.json Property_list_name: <code>contrastsensitivity_calc</code> Class_version: <code>1</code></p>"},{"location":"documents/calc/contrastsensitivity_calc/#contrastsensitivity_calc-fields","title":"contrastsensitivity_calc fields","text":"<p>Accessed by <code>contrastsensitivity_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters depends_on spatial_frequencies sensitivity_RB sensitivity_RBN sensitivity_RBNS relative_max_gain_RB relative_max_gain_RBN relative_max_gain_RBNS empirical_c50_RB empirical_c50_RBN empirical_c50_RBNS saturation_index_RB saturation_index_RBN saturation_index_RBNS parameters_RB parameters_RBN parameters_RBNS fitless_interpolated_c50 is_modulated_response visual_response_p_bonferroni response_varies_p_bonferroni response_type"},{"location":"documents/calc/contrastsensitivity_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/calc/contrasttuning_calc/","title":"contrasttuning_calc (ndi.document class)","text":""},{"location":"documents/calc/contrasttuning_calc/#class-definition","title":"Class definition","text":"<p>Class name: contrasttuning_calc Short name: contrasttuning_calc Superclasses: contrast_tuning, base</p> <p>Definition: $NDICALCDOCUMENTPATH/calc/contrasttuning_calc.json Schema for validation: $NDICALCSCHEMAPATH/calc/contrasttuning_calc.json Property_list_name: <code>contrasttuning_calc</code> Class_version: <code>1</code></p>"},{"location":"documents/calc/contrasttuning_calc/#contrasttuning_calc-fields","title":"contrasttuning_calc fields","text":"<p>Accessed by <code>contrasttuning_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters depends_on"},{"location":"documents/calc/contrasttuning_calc/#contrast_tuning-fields","title":"contrast_tuning fields","text":"<p>Accessed by <code>contrast_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance fitless fit"},{"location":"documents/calc/contrasttuning_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/calc/hartley_calc/","title":"hartley_calc (ndi.document class)","text":""},{"location":"documents/calc/hartley_calc/#class-definition","title":"Class definition","text":"<p>Class name: hartley_calc Short name: hartley_calc Superclasses: hartley_reverse_correlation, reverse_correlation, base, ngrid</p> <p>Definition: $NDICALCDOCUMENTPATH/calc/hartley_calc.json Schema for validation: $NDICALCSCHEMAPATH/calc/hartley_calc_schema.json Property_list_name: <code>hartley_calc</code> Class_version: <code>1</code></p>"},{"location":"documents/calc/hartley_calc/#hartley_calc-fields","title":"hartley_calc fields","text":"<p>Accessed by <code>hartley_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters depends_on"},{"location":"documents/calc/hartley_calc/#hartley_reverse_correlation-fields","title":"hartley_reverse_correlation fields","text":"<p>Accessed by <code>hartley_reverse_correlation.field</code> where field is one of the field names below</p> field default_value data type description stimulus_properties reconstruction_properties spiketimes frameTimes hartley_numbers"},{"location":"documents/calc/hartley_calc/#reverse_correlation-fields","title":"reverse_correlation fields","text":"<p>Accessed by <code>reverse_correlation.field</code> where field is one of the field names below</p> field default_value data type description method dimension_labels"},{"location":"documents/calc/hartley_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/calc/hartley_calc/#ngrid-fields","title":"ngrid fields","text":"<p>Accessed by <code>ngrid.field</code> where field is one of the field names below</p> field default_value data type description data_size data_type data_dim coordinates"},{"location":"documents/calc/oridirtuning_calc/","title":"oridirtuning_calc (ndi.document class)","text":""},{"location":"documents/calc/oridirtuning_calc/#class-definition","title":"Class definition","text":"<p>Class name: oridirtuning_calc Short name: oridirtuning_calc Superclasses: base, orientation_direction_tuning</p> <p>Definition: $NDICALCDOCUMENTPATH/calc/oridirtuning_calc.json Schema for validation: $NDICALCSCHEMAPATH/calc/oridirtuning_calc_schema.json Property_list_name: <code>oridirtuning_calc</code> Class_version: <code>1</code></p>"},{"location":"documents/calc/oridirtuning_calc/#oridirtuning_calc-fields","title":"oridirtuning_calc fields","text":"<p>Accessed by <code>oridirtuning_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters depends_on"},{"location":"documents/calc/oridirtuning_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/calc/oridirtuning_calc/#orientation_direction_tuning-fields","title":"orientation_direction_tuning fields","text":"<p>Accessed by <code>orientation_direction_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance vector fit"},{"location":"documents/calc/spatial_frequency_tuning_calc/","title":"spatial_frequency_tuning_calc (ndi.document class)","text":""},{"location":"documents/calc/spatial_frequency_tuning_calc/#class-definition","title":"Class definition","text":"<p>Class name: spatial_frequency_tuning_calc Short name: spatial_frequency_tuning_calc Superclasses: spatial_frequency_tuning, base</p> <p>Definition: $NDICALCDOCUMENTPATH/calc/spatial_frequency_tuning_calc.json Schema for validation: $NDICALCSCHEMAPATH/calc/spatial_frequency_tuning_calc.json Property_list_name: <code>spatial_frequency_tuning_calc</code> Class_version: <code>1</code></p>"},{"location":"documents/calc/spatial_frequency_tuning_calc/#spatial_frequency_tuning_calc-fields","title":"spatial_frequency_tuning_calc fields","text":"<p>Accessed by <code>spatial_frequency_tuning_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters depends_on"},{"location":"documents/calc/spatial_frequency_tuning_calc/#spatial_frequency_tuning-fields","title":"spatial_frequency_tuning fields","text":"<p>Accessed by <code>spatial_frequency_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance fitless fit_dog fit_movshon fit_movshon_c fit_spline fit_sgauss abs"},{"location":"documents/calc/spatial_frequency_tuning_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/calc/speedtuning_calc/","title":"speedtuning_calc (ndi.document class)","text":""},{"location":"documents/calc/speedtuning_calc/#class-definition","title":"Class definition","text":"<p>Class name: speedtuning_calc Short name: speedtuning_calc Superclasses: speed_tuning, base</p> <p>Definition: $NDICALCDOCUMENTPATH/calc/speedtuning_calc.json Schema for validation: $NDICALCSCHEMAPATH/calc/speedtuning_calc_schema.json Property_list_name: <code>speedtuning_calc</code> Class_version: <code>1</code></p>"},{"location":"documents/calc/speedtuning_calc/#speedtuning_calc-fields","title":"speedtuning_calc fields","text":"<p>Accessed by <code>speedtuning_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters depends_on"},{"location":"documents/calc/speedtuning_calc/#speed_tuning-fields","title":"speed_tuning fields","text":"<p>Accessed by <code>speed_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance fit fit_no_speed"},{"location":"documents/calc/speedtuning_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/calc/spike_shape_calc/","title":"spike_shape_calc (ndi.document class)","text":""},{"location":"documents/calc/spike_shape_calc/#class-definition","title":"Class definition","text":"<p>Class name: spike_shape_calc Short name: spike_shape_calc Superclasses: app, base</p> <p>Definition: $NDICALCDOCUMENTPATH/calc/spike_shape_calc.json Schema for validation: $NDICALCSCHEMAPATH/calc/spike_shape_calc_schema.json Property_list_name: <code>spike_shape_calc</code> Class_version: <code>1</code></p>"},{"location":"documents/calc/spike_shape_calc/#spike_shape_calc-fields","title":"spike_shape_calc fields","text":"<p>Accessed by <code>spike_shape_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters interval_center_times number_of_spikes_per_interval sample_times"},{"location":"documents/calc/spike_shape_calc/#app-fields","title":"app fields","text":"<p>Accessed by <code>app.field</code> where field is one of the field names below</p> field default_value data type description name version url os os_version interpreter interpreter_version"},{"location":"documents/calc/spike_shape_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/calc/temporal_frequency_tuning_calc/","title":"temporal_frequency_tuning_calc (ndi.document class)","text":""},{"location":"documents/calc/temporal_frequency_tuning_calc/#class-definition","title":"Class definition","text":"<p>Class name: temporal_frequency_tuning_calc Short name: temporal_frequency_tuning_calc Superclasses: temporal_frequency_tuning, base</p> <p>Definition: $NDICALCDOCUMENTPATH/calc/temporal_frequency_tuning_calc.json Schema for validation: $NDICALCSCHEMAPATH/calc/temporal_frequency_tuning_calc.json Property_list_name: <code>temporal_frequency_tuning_calc</code> Class_version: <code>1</code></p>"},{"location":"documents/calc/temporal_frequency_tuning_calc/#temporal_frequency_tuning_calc-fields","title":"temporal_frequency_tuning_calc fields","text":"<p>Accessed by <code>temporal_frequency_tuning_calc.field</code> where field is one of the field names below</p> field default_value data type description input_parameters depends_on"},{"location":"documents/calc/temporal_frequency_tuning_calc/#temporal_frequency_tuning-fields","title":"temporal_frequency_tuning fields","text":"<p>Accessed by <code>temporal_frequency_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance fitless fit_dog fit_movshon fit_movshon_c fit_spline fit_sgauss abs"},{"location":"documents/calc/temporal_frequency_tuning_calc/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/neuro/hartley_reverse_correlation/","title":"hartley_reverse_correlation (ndi.document class)","text":""},{"location":"documents/neuro/hartley_reverse_correlation/#class-definition","title":"Class definition","text":"<p>Class name: hartley_reverse_correlation Short name: hartley_reverse_correlation Superclasses: reverse_correlation, base, ngrid</p> <p>Definition: $NDICALCDOCUMENTPATH/neuro/hartley_reverse_correlation.json Schema for validation: $NDICALCSCHEMAPATH/neuro/hartley_reverse_correlation.json Property_list_name: <code>hartley_reverse_correlation</code> Class_version: <code>1</code></p>"},{"location":"documents/neuro/hartley_reverse_correlation/#hartley_reverse_correlation-fields","title":"hartley_reverse_correlation fields","text":"<p>Accessed by <code>hartley_reverse_correlation.field</code> where field is one of the field names below</p> field default_value data type description stimulus_properties reconstruction_properties spiketimes frameTimes hartley_numbers"},{"location":"documents/neuro/hartley_reverse_correlation/#reverse_correlation-fields","title":"reverse_correlation fields","text":"<p>Accessed by <code>reverse_correlation.field</code> where field is one of the field names below</p> field default_value data type description method dimension_labels"},{"location":"documents/neuro/hartley_reverse_correlation/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/neuro/hartley_reverse_correlation/#ngrid-fields","title":"ngrid fields","text":"<p>Accessed by <code>ngrid.field</code> where field is one of the field names below</p> field default_value data type description data_size data_type data_dim coordinates"},{"location":"documents/neuro/reverse_correlation/","title":"reverse_correlation (ndi.document class)","text":""},{"location":"documents/neuro/reverse_correlation/#class-definition","title":"Class definition","text":"<p>Class name: reverse_correlation Short name: reverse_correlation Superclasses: base, ngrid</p> <p>Definition: $NDICALCDOCUMENTPATH/neuro/reverse_correlation.json Schema for validation: $NDICALCSCHEMAPATH/neuro/reverse_correlation.json Property_list_name: <code>reverse_correlation</code> Class_version: <code>1</code></p>"},{"location":"documents/neuro/reverse_correlation/#reverse_correlation-fields","title":"reverse_correlation fields","text":"<p>Accessed by <code>reverse_correlation.field</code> where field is one of the field names below</p> field default_value data type description method dimension_labels"},{"location":"documents/neuro/reverse_correlation/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/neuro/reverse_correlation/#ngrid-fields","title":"ngrid fields","text":"<p>Accessed by <code>ngrid.field</code> where field is one of the field names below</p> field default_value data type description data_size data_type data_dim coordinates"},{"location":"documents/vision/contrast_tuning/","title":"contrast_tuning (ndi.document class)","text":""},{"location":"documents/vision/contrast_tuning/#class-definition","title":"Class definition","text":"<p>Class name: contrast_tuning Short name: contrast_tuning Superclasses: base</p> <p>Definition: $NDICALCDOCUMENTPATH/vision/contrast_tuning.json Schema for validation: $NDICALCSCHEMAPATH/vision/contrast_tuning_schema.json Property_list_name: <code>contrast_tuning</code> Class_version: <code>1</code></p>"},{"location":"documents/vision/contrast_tuning/#contrast_tuning-fields","title":"contrast_tuning fields","text":"<p>Accessed by <code>contrast_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance fitless fit"},{"location":"documents/vision/contrast_tuning/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/vision/spatial_frequency_tuning/","title":"spatial_frequency_tuning (ndi.document class)","text":""},{"location":"documents/vision/spatial_frequency_tuning/#class-definition","title":"Class definition","text":"<p>Class name: spatial_frequency_tuning Short name: spatial_frequency_tuning Superclasses: base</p> <p>Definition: $NDICALCDOCUMENTPATH/vision/spatial_frequency_tuning.json Schema for validation: $NDICALCSCHEMAPATH/vision/spatial_frequency_tuning_schema.json Property_list_name: <code>spatial_frequency_tuning</code> Class_version: <code>1</code></p>"},{"location":"documents/vision/spatial_frequency_tuning/#spatial_frequency_tuning-fields","title":"spatial_frequency_tuning fields","text":"<p>Accessed by <code>spatial_frequency_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance fitless fit_dog fit_movshon fit_movshon_c fit_spline fit_sgauss abs"},{"location":"documents/vision/spatial_frequency_tuning/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/vision/speed_tuning/","title":"speed_tuning (ndi.document class)","text":""},{"location":"documents/vision/speed_tuning/#class-definition","title":"Class definition","text":"<p>Class name: speed_tuning Short name: speed_tuning Superclasses: base</p> <p>Definition: $NDICALCDOCUMENTPATH/vision/speed_tuning.json Schema for validation: $NDICALCSCHEMAPATH/vision/speed_tuning_schema.json Property_list_name: <code>speed_tuning</code> Class_version: <code>1</code></p>"},{"location":"documents/vision/speed_tuning/#speed_tuning-fields","title":"speed_tuning fields","text":"<p>Accessed by <code>speed_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance fit fit_no_speed"},{"location":"documents/vision/speed_tuning/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"documents/vision/temporal_frequency_tuning/","title":"temporal_frequency_tuning (ndi.document class)","text":""},{"location":"documents/vision/temporal_frequency_tuning/#class-definition","title":"Class definition","text":"<p>Class name: temporal_frequency_tuning Short name: temporal_frequency_tuning Superclasses: base</p> <p>Definition: $NDICALCDOCUMENTPATH/vision/temporal_frequency_tuning.json Schema for validation: $NDICALCSCHEMAPATH/vision/temporal_frequency_tuning_schema.json Property_list_name: <code>temporal_frequency_tuning</code> Class_version: <code>1</code></p>"},{"location":"documents/vision/temporal_frequency_tuning/#temporal_frequency_tuning-fields","title":"temporal_frequency_tuning fields","text":"<p>Accessed by <code>temporal_frequency_tuning.field</code> where field is one of the field names below</p> field default_value data type description properties tuning_curve significance fitless fit_dog fit_movshon fit_movshon_c fit_spline fit_sgauss abs"},{"location":"documents/vision/temporal_frequency_tuning/#base-fields","title":"base fields","text":"<p>Accessed by <code>base.field</code> where field is one of the field names below</p> field default_value data type description id session_id name datestamp"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_sensitivity.m/","title":"CLASS ndi.calc.vis.contrast_sensitivity","text":"<pre><code>  CONTRAST_TUNING - a contrast_sensitivity demonstration of an ndi.calculator object\n\n  CONTRAST_TUNING_OBJ = CONTRAST_TUNING(SESSION)\n\n  Creates a CONTRAST_TUNING ndi.calculator object\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_sensitivity.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_sensitivity.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_sensitivity.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.contrast_sensitivity clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer contrast_sensitivity a contrast_sensitivity demonstration of an ndi.calculator object default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_sensitivity.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.vis.contrast_sensitivity/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.contrast_sensitivity/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.contrast_sensitivity/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.vis.contrast_sensitivity/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for ndi.calc.example.contrast_sensitivity</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Creates a contrast_sensitivity_calc document given input parameters.\n\n  The document that is created contrast_sensitivity\n  by the input parameters.\n  check inputs\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.vis.contrast_sensitivity/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.vis.contrast_sensitivity/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n\n  In this abstract class, B is always 1 and ERRORMSG is always an empty string.\n\n  Developer's note: this method should be overridden in each calculator object.\n\nHelp for ndi.calc.vis.contrast_sensitivity/compare_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>contrast_sensitivity - a contrast_sensitivity demonstration of an ndi.calculator object</p> <pre><code>CONTRAST_TUNING_OBJ = CONTRAST_TUNING(SESSION)\n\n  Creates a CONTRAST_TUNING ndi.calculator object\n\n    Documentation for ndi.calc.vis.contrast_sensitivity/contrast_sensitivity\n       doc ndi.calc.vis.contrast_sensitivity\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  For the ndi.calc.stimulus.contrast_sensitivity_calc class, this looks for \n  documents of type 'stimulus_response_scalar' with 'response_type' fields\n  the contain 'mean' or 'F1'.\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.vis.contrast_sensitivity.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator. For contrast_sensitivity_calc, there is no appropriate default parameters\n  so this search will yield empty.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.vis.contrast_sensitivity/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.vis.contrast_sensitivity/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - return the about information for an NDI calculator</p> <pre><code>TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.contrast_sensitivity/doc_about is inherited from superclass ndi.calculator\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.vis.contrast_sensitivity.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.contrast_sensitivity/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate tests for ndi.calc. objects*</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,...\n     SCOPE, NUMBER_OF_TESTS)\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS is the number of tests to generate.\n\nHelp for ndi.calc.vis.contrast_sensitivity/generate_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.vis.contrast_sensitivity.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its ndi.document id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overridden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.contrast_sensitivity/is_valid_dependency_input is inherited from superclass ndi.calculator\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.vis.contrast_sensitivity/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.vis.contrast_sensitivity/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.vis.contrast_sensitivity/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.contrast_sensitivity/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.vis.contrast_sensitivity/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.vis.contrast_sensitivity/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.vis.contrast_sensitivity/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.contrast_sensitivity.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.contrast_sensitivity.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a plot of the tuning curve.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of those parameters.\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.vis.contrast_sensitivity.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.vis.contrast_sensitivity/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.contrast_sensitivity/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.vis.contrast_sensitivity/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.vis.contrast_sensitivity/searchquery is inherited from superclass ndi.app\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.contrast_sensitivity/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.vis.contrast_sensitivity/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.vis.contrast_sensitivity/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.vis.contrast_sensitivity/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.vis.contrast_sensitivity/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_tuning.m/","title":"CLASS ndi.calc.vis.contrast_tuning","text":"<pre><code>  CONTRAST_TUNING - a contrast_tuning demonstration of an ndi.calculator object\n\n  CONTRAST_TUNING_OBJ = CONTRAST_TUNING(SESSION)\n\n  Creates a CONTRAST_TUNING ndi.calculator object\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_tuning.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_tuning.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_tuning.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.contrast_tuning calculate_contrast_indexes calculate contrast index values from a tuning curve clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer contrast_tuning a contrast_tuning demonstration of an ndi.calculator object default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate mock documents and expected answers for tests generate_mock_parameters generate mock parameters for testing ndi.calc.vis.contrast_tuning graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/contrast_tuning.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.vis.contrast_tuning/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.contrast_tuning/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.contrast_tuning/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.vis.contrast_tuning/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for ndi.calc.example.contrast_tuning</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Creates a contrast_tuning_calc document given input parameters.\n\n  The document that is created contrast_tuning\n  by the input parameters.\n  check inputs\n</code></pre> <p>calculate_contrast_indexes - calculate contrast index values from a tuning curve</p> <pre><code>CONTRAST_PROPS_DOC = CALCULATE_CONTRAST_INDEXES(NDI_CONTRAST_TUNING_CALC_OBJ, TUNING_DOC)\n\n  Given a 1-dimensional tuning curve document, this function calculates contrast response\n  parameters and stores them in CONTRAST_TUNING document CONTRAST_PROPS_DOC.\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.vis.contrast_tuning/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.vis.contrast_tuning/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n</code></pre> <p>contrast_tuning - a contrast_tuning demonstration of an ndi.calculator object</p> <pre><code>CONTRAST_TUNING_OBJ = CONTRAST_TUNING(SESSION)\n\n  Creates a CONTRAST_TUNING ndi.calculator object\n\n    Documentation for ndi.calc.vis.contrast_tuning/contrast_tuning\n       doc ndi.calc.vis.contrast_tuning\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  For the ndi.calc.stimulus.contrast_tuning_calc class, this looks for \n  documents of type 'stimulus_response_scalar' with 'response_type' fields\n  the contain 'mean' or 'F1'.\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.vis.contrast_tuning.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator. For contrast_tuning_calc, there is no appropriate default parameters\n  so this search will yield empty.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.vis.contrast_tuning/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.vis.contrast_tuning/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - return the about information for an NDI calculator</p> <pre><code>TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.contrast_tuning/doc_about is inherited from superclass ndi.calculator\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.vis.contrast_tuning.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.contrast_tuning/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate mock documents and expected answers for tests</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CONTRAST_CALC_OBJ, ...\n     SCOPE, NUMBER_OF_TESTS, ...)\n\n  Creates a set of documents to test ndi.calc.vis.contrast_tuning.\n\n  SCOPE is the scope to be tested: 'standard', 'low_noise', 'high_noise'\n  NUMBER_OF_TESTS indicates the number of tests to be performed.\n\n  DOCS{i} is the set of helper documents that may have been created\n    in generating the ith test.\n  DOC_OUTPUT{i} is the actual output of the calculator when operating on\n    DOCS{i} (the ith test).\n  DOC_EXPECTED_OUTPUT{i} is what the output of the calculator should be, if there\n    were no noise. If these documents are plotted, they must be plotted\n    with Display_element_name set to 0 in PLOT.            %   \n\n  The quality of these outputs are evaluted using the function COMPARE_MOCK_DOCS\n  as part of the TEST function for ndi.calculator objects.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | generate_expected_docs(0)| Should we generate the expected docs? (That is,   |\n  |                          |   generate the \"right answer\"?) Use carefully.    |\n  |--------------------------|---------------------------------------------------|\n</code></pre> <p>generate_mock_parameters - generate mock parameters for testing ndi.calc.vis.contrast_tuning</p> <pre><code>[RMAX, C50, N, S, TOTAL] = ndi.calc.vis.generate_mock_parameters(scope, index)\n\n  Generates a parameter set for generating a mock document with a given index value.\n  RMAX is the maximum response\n  C50 is the half-maximum contrast\n  N is the exponent parameter that sets the shape\n  S is the degree of supersaturation\n  TOTAL is the total number of mock stimuli that are available to be generated.\n\n  INDEX selects which parameters are used to generate a mock document (from 1...TOTAL).\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.vis.contrast_tuning.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its base id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overriden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.vis.contrast_tuning/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.vis.contrast_tuning/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.vis.contrast_tuning/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.contrast_tuning/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.vis.contrast_tuning/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.vis.contrast_tuning/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.vis.contrast_tuning/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.contrast_tuning.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.contrast_tuning.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a plot of the tuning curve.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of those parameters.\n\n  Additional name/value pairs are:\n  -------------------------------------------------------------------------\n  | Parameter (default)            | Description                          |\n  |--------------------------------|--------------------------------------|\n  | Display_element_name (1)       | 0/1 Should we display the element    |\n  |                                |    name in the title?                |\n  |--------------------------------|--------------------------------------|\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.vis.contrast_tuning.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.vis.contrast_tuning/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.contrast_tuning/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.vis.contrast_tuning/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.vis.contrast_tuning/searchquery is inherited from superclass ndi.app\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.contrast_tuning/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.vis.contrast_tuning/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.vis.contrast_tuning/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.vis.contrast_tuning/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.vis.contrast_tuning/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/hartley_calc.m/","title":"CLASS ndi.calc.vis.hartley_calc","text":"<pre><code>  HARTLEY_CALC - a hartley_calc demonstration of an ndi.calculator object\n\n  HARTLEY_CALC_OBJ = HARTLEY_CALC(SESSION)\n\n  Creates a HARTLEY_CALC ndi.calculator object\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/hartley_calc.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/hartley_calc.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/hartley_calc.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.hartley_calc clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance hartley_calc a hartley_calc demonstration of an ndi.calculator object hartleystimdocstruct return the fields of the Hartley stimulus necessary for the hartley_reverse_correlation document is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? ishartleystim does a stimulus presentation doc contain a Hartley stimulus? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate read_sta read the spike-triggered-average file from disk run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/hartley_calc.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.vis.hartley_calc/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.hartley_calc/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.hartley_calc/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.vis.hartley_calc/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for ndi.calc.example.hartley_calc</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Creates a hartley_calc_calc document given input parameters.\n\n  The document that is created hartley_calc\n  by the input parameters.\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.vis.hartley_calc/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.vis.hartley_calc/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n\n  In this abstract class, B is always 1 and ERRORMSG is always an empty string.\n\n  Developer's note: this method should be overridden in each calculator object.\n\nHelp for ndi.calc.vis.hartley_calc/compare_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  For the ndi.calc.stimulus.hartley_calc_calc class, this looks for \n  documents of type 'stimulus_response_scalar.json' with 'response_type' fields\n  the contain 'mean' or 'F1'.\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.vis.hartley_calc.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator. For hartley_calc_calc, there is no appropriate default parameters\n  so this search will yield empty.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.vis.hartley_calc/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.vis.hartley_calc/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - return the about information for an NDI calculator</p> <pre><code>TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.hartley_calc/doc_about is inherited from superclass ndi.calculator\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.vis.hartley_calc.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.hartley_calc/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate tests for ndi.calc. objects*</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,...\n     SCOPE, NUMBER_OF_TESTS)\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS is the number of tests to generate.\n\nHelp for ndi.calc.vis.hartley_calc/generate_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.vis.hartley_calc.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>hartley_calc - a hartley_calc demonstration of an ndi.calculator object</p> <pre><code>HARTLEY_CALC_OBJ = HARTLEY_CALC(SESSION)\n\n  Creates a HARTLEY_CALC ndi.calculator object\n\n    Documentation for ndi.calc.vis.hartley_calc/hartley_calc\n       doc ndi.calc.vis.hartley_calc\n</code></pre> <p>hartleystimdocstruct - return the fields of the Hartley stimulus necessary for the hartley_reverse_correlation document</p> <pre><code>HARTLEYDOCINFO = HARTLEYSTIMDOCSTRUCT(STIMSTRUCT)\n\n  Returns the fields of the Hartley stim that are needed for the\n  NDI hartley_reverse_correlation document:\n\n  Fields: M, L_max, K_max, sf_max, fps, color_high, color_low, rect\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its ndi.document id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overridden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.hartley_calc/is_valid_dependency_input is inherited from superclass ndi.calculator\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.vis.hartley_calc/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>ishartleystim - does a stimulus presentation doc contain a Hartley stimulus?</p> <pre><code>[B,STIMIDS] = ndi.calc.hartley_calc.ishartleystim(STIM_PRESENTATION_DOC)\n\n  Returns 1 iff STIM_PRESENTATION_DOC contains Hartley stimuli. Returns\n  the STIMIDS of any Hartley stimuli.\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.vis.hartley_calc/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.vis.hartley_calc/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.hartley_calc/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.vis.hartley_calc/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.vis.hartley_calc/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.vis.hartley_calc/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.hartley_calc.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.hartley_calc.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a plot of the tuning curve.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of those parameters.\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.vis.hartley_calc.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>read_sta - read the spike-triggered-average file from disk</p> <pre><code>[STA, PVAL] = READ_STA(NDI_CALCULATOR_OBJ, DOC_OR_ID)\n\n  Reads the spike-triggered average and p-values from disk.\n  NDI_CALCULATOR_OBJ should be an ndi.calc.vis.hartley_calc object and\n  DOC_OR_ID should either be an ndi.document or the id of the hartley\n  document object to be read.\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.vis.hartley_calc/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.hartley_calc/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.vis.hartley_calc/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.vis.hartley_calc/searchquery is inherited from superclass ndi.app\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.hartley_calc/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.vis.hartley_calc/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.vis.hartley_calc/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.vis.hartley_calc/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.vis.hartley_calc/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/oridir_tuning.m/","title":"CLASS ndi.calc.vis.oridir_tuning","text":"<pre><code>  oridir_tuning - ndi.calculator object that\n  calculates orientation and direction tuning curves from spike\n  elements\n\n  ORIDIRTUNING_OBJ = ORIDIRTUNING(SESSION)\n\n  Creates a oridir_tuning ndi.calculator object\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/oridir_tuning.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/oridir_tuning.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/oridir_tuning.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for calculate_oridir_indexes calculate orientation and direction index values from a tuning curve clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate mock documents and expected answers for tests generate_mock_parameters generate mock parameters for testing ndi.calc.vis.oridir_tuning graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input checks if a potential dependency input isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app oridir_tuning ndi.calculator object that parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/oridir_tuning.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.vis.oridir_tuning/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.oridir_tuning/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.oridir_tuning/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.vis.oridir_tuning/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for</p> <pre><code>ndi.calc.oridir_tuning\n\n  DOC = CALCULATE(NDI_CALCULATION_OBJ, PARAMETERS)\n\n  Creates a oridir_tuning_direction_tuning_calc document given input parameters.\n</code></pre> <p>calculate_oridir_indexes - calculate orientation and direction index values from a tuning curve</p> <pre><code>ORIDIR_DOC = CALCULATE_ORIDIR_INDEXES(NDI_ORIDIRTUNING_CALC_OBJ, TUNING_DOC)\n\n  Given a 2-dimensional tuning curve document with measurements\n  at orientation and direction frequencies, this function calculates oridir_tuning\n  parameters and stores them in ORIDIRTUNING document ORIDIR_DOC.\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.vis.oridir_tuning/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.vis.oridir_tuning/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n\n  Uses the function ndi.calc.vis.test.oridir_compare_docs().\n</code></pre> <p>default_parameters_query - what queries should be used to</p> <pre><code>search for input parameters\n\n  QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATION_OBJ,\n  PARAMETERS_SPECIFICATION)\n\n  Calling SEARCH_FOR_INPUT_PARAMETERS allows for users to\n  specify a 'query' structure to select particular documents to\n  be placed into the 'depends_on' parameter specification.\n  If a 'query' structure is not provided, the default will be\n  used.\n\n  The function returns: \n  |-----------|--------------------------------------------|\n  | query     | A structure with 'name' and 'query' fields |\n  |           | that describes a search to be performed to |\n  |           | identify inputs for the 'depends_on' field |\n  |           | in the PARAMETERS output.                  |\n  |-----------|--------------------------------------------|\n\n  For the ndi.calc.vision.tuning_curve class, this looks for\n  documents of type 'stimulus_tuningcurve.json' with\n  'response_type' fields that contain 'mean' or 'F1'.\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.vis.oridir_tuning.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATION_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator.\n\n  search for stimulus_tuningcurve_id\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.vis.oridir_tuning/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.vis.oridir_tuning/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - return the about information for an NDI calculator</p> <pre><code>TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.oridir_tuning/doc_about is inherited from superclass ndi.calculator\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.vis.oridir_tuning.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.oridir_tuning/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate mock documents and expected answers for tests</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(ORIDIR_CALC_OBJ, ...\n     SCOPE, NUMBER_OF_TESTS, ...)\n\n  Creates a set of documents to test ndi.calc.vis.oridir_tuning.\n\n  SCOPE is the scope to be tested: 'standard', 'low_noise', 'high_noise'\n  NUMBER_OF_TESTS indicates the number of tests to be performed.\n\n  DOCS{i} is the set of helper documents that may have been created\n    in generating the ith test.\n  DOC_OUTPUT{i} is the actual output of the calculator when operating on\n    DOCS{i} (the ith test).\n  DOC_EXPECTED_OUTPUT{i} is what the output of the calculator should be, if there\n    were no noise.\n\n  The quality of these outputs are evaluted using the function COMPARE_MOCK_DOCS\n  as part of the TEST function for ndi.calculator objects.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | generate_expected_docs(0)| Should we generate the expected docs? (That is,   |\n  |                          |   generate the \"right answer\"?) Use carefully.    |\n  | specific_test_inds([])     | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n</code></pre> <p>generate_mock_parameters - generate mock parameters for testing ndi.calc.vis.oridir_tuning</p> <pre><code>[P, TOTAL] = ndi.calc.vis.generate_mock_parameters(scope, index)\n\n  Generates a parameter set for generating a mock document with a given index value.\n  P will be a row vector of parameters [Rsp Rp Rn theta sigma].\n  TOTAL is the total number of mock stimuli that are available to be generated.\n\n  SCOPE can be 'standard', 'random_nonoise', or 'random_noisy'.\n  INDEX selects which parameters are used to generate a mock document (from 1..TOTAL, wrapped\n  using MOD).\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.vis.oridir_tuning.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>is_valid_dependency_input - checks if a potential dependency input</p> <pre><code>actually valid for this calculator\n\n  B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATION_OBJ, NAME,\n  VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  NAME - potential dependency name\n  VALUE - base id of the potential dependency name\n\n  The base class behavior of this function will return true.\n  This is overridden if additional criteria beyond an ndi.query\n  are needed to assess if a document is an appropriate input\n  for the calculator.\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.vis.oridir_tuning/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.vis.oridir_tuning/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.vis.oridir_tuning/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.oridir_tuning/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.vis.oridir_tuning/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.vis.oridir_tuning/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.vis.oridir_tuning/newdocument is inherited from superclass ndi.app\n</code></pre> <p>oridir_tuning - ndi.calculator object that</p> <pre><code>calculates orientation and direction tuning curves from spike\n  elements\n\n  ORIDIRTUNING_OBJ = ORIDIRTUNING(SESSION)\n\n  Creates a oridir_tuning ndi.calculator object\n\n    Documentation for ndi.calc.vis.oridir_tuning/oridir_tuning\n       doc ndi.calc.vis.oridir_tuning\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.oridir_tuning.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.oridir_tuning.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator</p> <pre><code>H=PLOT(NDI_CALCULATION_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a plot of the tuning curve.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of those parameters.\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.vis.oridir_tuning.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.vis.oridir_tuning/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.oridir_tuning/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.vis.oridir_tuning/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.vis.oridir_tuning/searchquery is inherited from superclass ndi.app\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.oridir_tuning/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.vis.oridir_tuning/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.vis.oridir_tuning/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.vis.oridir_tuning/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.vis.oridir_tuning/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spatial_frequency_tuning.m/","title":"CLASS ndi.calc.vis.spatial_frequency_tuning","text":"<pre><code>  SPATIAL_FREQUENCY_TUNING - a spatial_frequency_tuning demonstration of an ndi.calculator object\n\n  SPATIAL_FREQUENCY_TUNING_OBJ = SPATIAL_FREQUENCY_TUNING(SESSION)\n\n  Creates a SPATIAL_FREQUENCY_TUNING ndi.calculator object\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spatial_frequency_tuning.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spatial_frequency_tuning.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spatial_frequency_tuning.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.spatial_frequency_tuning calculate_spatial_frequency_indexes calculate contrast index values from a tuning curve clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate mock documents and expected answers for tests generate_mock_parameters generate mock parameters for testing ndi.calc.vis.spatial_frequency_tuning graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app spatial_frequency_tuning a spatial_frequency_tuning demonstration of an ndi.calculator object struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spatial_frequency_tuning.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for ndi.calc.example.spatial_frequency_tuning</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Creates a spatial_frequency_tuning_calc document given input parameters.\n\n  The document that is created spatial_frequency_tuning\n  by the input parameters.\n  check inputs\n</code></pre> <p>calculate_spatial_frequency_indexes - calculate contrast index values from a tuning curve</p> <pre><code>SPATIAL_FREQUENCY_PROPS_DOC = CALCULATE_SPATIAL_FREQUENCY_INDEXES(NDI_SPATIAL_FREQUENCY_TUNING_CALC_OBJ, TUNING_DOC)\n\n  Given a 1-dimensional tuning curve document, this function calculates contrast response\n  parameters and stores them in SPATIAL_FREQUENCY_TUNING document SPATIAL_FREQUENCY_PROPS_DOC.\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.vis.spatial_frequency_tuning/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(TEMPORAL_FREQ_CALC_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  For the ndi.calc.stimulus.spatial_frequency_tuning_calc class, this looks for \n  documents of type 'stimulus_response_scalar' with 'response_type' fields\n  the contain 'mean' or 'F1'.\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator. For spatial_frequency_tuning_calc, there is no appropriate default parameters\n  so this search will yield empty.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - return the about information for an NDI calculator</p> <pre><code>TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/doc_about is inherited from superclass ndi.calculator\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.vis.spatial_frequency_tuning.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate mock documents and expected answers for tests</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(SPATIAL_FREQ_CALC_OBJ, ...\n     SCOPE, NUMBER_OF_TESTS, ...)\n\n  Creates a set of documents to test ndi.calc.vis.spatial_frequency_tuning.\n\n  SCOPE is the scope to be tested: 'standard', 'low_noise', 'high_noise'\n  NUMBER_OF_TESTS indicates the number of tests to be performed.\n\n  DOCS{i} is the set of helper documents that may have been created\n    in generating the ith test.\n  DOC_OUTPUT{i} is the actual output of the calculator when operating on\n    DOCS{i} (the ith test).\n  DOC_EXPECTED_OUTPUT{i} is what the output of the calculator should be, if there\n    were no noise.\n\n  The quality of these outputs are evaluted using the function COMPARE_MOCK_DOCS\n  as part of the TEST function for ndi.calculator objects.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | generate_expected_docs(0)| Should we generate the expected docs? (That is,   |\n  |                          |   generate the \"right answer\"?) Use carefully.    |\n  |--------------------------|---------------------------------------------------|\n</code></pre> <p>generate_mock_parameters - generate mock parameters for testing ndi.calc.vis.spatial_frequency_tuning</p> <pre><code>[P, TOTAL] = ndi.calc.vis.generate_mock_parameters(scope, index)\n\n  Generates a parameter set for generating a mock document with a given index value.\n  P will be a row vector of parameters \n  TOTAL is the total number of mock stimuli that are available to be generated.\n\n  SCOPE can be 'standard', 'random_nonoise', or 'random_noisy'.\n  INDEX selects which parameters are used to generate a mock document (from 1..TOTAL, wrapped\n  using MOD).\n\n plot is using dog, movshon, and movshon_c fits - let's use\n those here\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.vis.spatial_frequency_tuning.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its base id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overriden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.spatial_frequency_tuning.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.spatial_frequency_tuning.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a plot of the tuning curve.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of many parameters.\n  Also takes:\n  |----------------------|-------------------------------------------------------|\n  | Parameter (default)  | Description                                           |\n  |----------------------|-------------------------------------------------------|\n  | useAbsolute (0)      | Plot the absolute value of the responses and fits of  | \n  |                      |   absolute value.                                     |\n  |----------------------|-------------------------------------------------------|\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.vis.spatial_frequency_tuning.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/searchquery is inherited from superclass ndi.app\n</code></pre> <p>spatial_frequency_tuning - a spatial_frequency_tuning demonstration of an ndi.calculator object</p> <pre><code>SPATIAL_FREQUENCY_TUNING_OBJ = SPATIAL_FREQUENCY_TUNING(SESSION)\n\n  Creates a SPATIAL_FREQUENCY_TUNING ndi.calculator object\n\n    Documentation for ndi.calc.vis.spatial_frequency_tuning/spatial_frequency_tuning\n       doc ndi.calc.vis.spatial_frequency_tuning\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.vis.spatial_frequency_tuning/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/speed_tuning.m/","title":"CLASS ndi.calc.vis.speed_tuning","text":"<pre><code>  SPEED_TUNING - a speed_tuning demonstration of an ndi.calculator object\n\n  SPEED_TUNING_OBJ = SPEED_TUNING(SESSION)\n\n  Creates a SPEED_TUNING ndi.calculator object\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/speed_tuning.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/speed_tuning.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/speed_tuning.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.speed_tuning calculate_speed_indexes calculate speed index values from a tuning curve clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate mock documents and expected answers for tests generate_mock_parameters generate mock parameters for testing ndi.calc.vis.oridir_tuning graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app speed_tuning a speed_tuning demonstration of an ndi.calculator object struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/speed_tuning.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.vis.speed_tuning/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.speed_tuning/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.speed_tuning/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.vis.speed_tuning/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for ndi.calc.example.speed_tuning</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Creates a speed_tuning_calc document given input parameters.\n\n  The document that is created speed_tuning\n  by the input parameters.\n  check inputs\n</code></pre> <p>calculate_speed_indexes - calculate speed index values from a tuning curve</p> <pre><code>SPEED_PROPS_DOC = CALCULATE_SPEED_INDEXES(NDI_SPEED_TUNING_CALC_OBJ, TUNING_DOC)\n\n  Given a 2-dimensional tuning curve document with measurements at many spatial and\n  and temporal frequencies, this function calculates speed response\n  parameters and stores them in SPEED_TUNING document SPEED_PROPS_DOC.\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.vis.speed_tuning/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.vis.speed_tuning/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  For the ndi.calc.stimulus.speed_tuning_calc class, this looks for \n  documents of type 'stimulus_response_scalar.json' with 'response_type' fields\n  the contain 'mean' or 'F1'.\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.vis.speed_tuning.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator. For speed_tuning_calc, there is no appropriate default parameters\n  so this search will yield empty.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.vis.speed_tuning/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.vis.speed_tuning/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - return the about information for an NDI calculator</p> <pre><code>TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.speed_tuning/doc_about is inherited from superclass ndi.calculator\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.vis.speed_tuning.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.speed_tuning/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate mock documents and expected answers for tests</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(SPEED_CALC_OBJ, ...\n     SCOPE, NUMBER_OF_TESTS, ...)\n\n  Creates a set of documents to test ndi.calc.vis.speed_tuning.\n\n  SCOPE is the scope to be tested: 'standard', 'low_noise', 'high_noise'\n  NUMBER_OF_TESTS indicates the number of tests to be performed.\n\n  DOCS{i} is the set of helper documents that may have been created\n    in generating the ith test.\n  DOC_OUTPUT{i} is the actual output of the calculator when operating on\n    DOCS{i} (the ith test).\n  DOC_EXPECTED_OUTPUT{i} is what the output of the calculator should be, if there\n    were no noise.\n\n  The quality of these outputs are evaluted using the function COMPARE_MOCK_DOCS\n  as part of the TEST function for ndi.calculator objects.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | generate_expected_docs(0)| Should we generate the expected docs? (That is,   |\n  |                          |   generate the \"right answer\"?) Use carefully.    |\n  |--------------------------|---------------------------------------------------|\n</code></pre> <p>generate_mock_parameters - generate mock parameters for testing ndi.calc.vis.oridir_tuning</p> <pre><code>[P, TOTAL] = ndi.calc.vis.generate_mock_parameters(scope, index)\n\n  Generates a parameter set for generating a mock document with a given index value.\n  P will be a row vector of parameters [a1 b1 a2 b2].\n  TOTAL is the total number of mock stimuli that are available to be generated.\n\n  SCOPE can be 'standard', 'random_nonoise', or 'random_noisy'.\n  INDEX selects which parameters are used to generate a mock document (from 1..TOTAL, wrapped\n  using MOD).\n\n 1st test taken from demo script\n 2nd test neuron not selective for speed\n 3rd test neuron maximally selective for speed\n 4th through 7th: tiling TF/SF space with TF-tuned\n cells\n 8th through 11th: tiling TF/SF space with SF-tuned\n cells\n 12th through 15th: tiling TF/SF space with speed-tuned\n cells\n 16th: try a different peak neuron response?\n 17th and 18th: skew temporal freq tuning curve in\n different directions?\n add more tests by adding to end of each parameter's vector\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.vis.speed_tuning.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its base id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overriden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.vis.speed_tuning/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.vis.speed_tuning/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.vis.speed_tuning/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.speed_tuning/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.vis.speed_tuning/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.vis.speed_tuning/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.vis.speed_tuning/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.speed_tuning.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.speed_tuning.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a plot of the tuning curve.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of those parameters.\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.vis.speed_tuning.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.vis.speed_tuning/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.speed_tuning/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.vis.speed_tuning/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.vis.speed_tuning/searchquery is inherited from superclass ndi.app\n</code></pre> <p>speed_tuning - a speed_tuning demonstration of an ndi.calculator object</p> <pre><code>SPEED_TUNING_OBJ = SPEED_TUNING(SESSION)\n\n  Creates a SPEED_TUNING ndi.calculator object\n\n    Documentation for ndi.calc.vis.speed_tuning/speed_tuning\n       doc ndi.calc.vis.speed_tuning\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.speed_tuning/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.vis.speed_tuning/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.vis.speed_tuning/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.vis.speed_tuning/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.vis.speed_tuning/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spike_shape.m/","title":"CLASS ndi.calc.vis.spike_shape","text":"<pre><code>  SPIKE_SHAPE_CALC - calculator that produces spike waveform shapes in an epoch\n\n  SPIKE_SHAPE_CALC_OBJ = SPIKE_SHAPE_CALC(SESSION)\n\n  Creates a SPIKE_SHAPE_CALC ndi.calculator object\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spike_shape.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spike_shape.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spike_shape.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.spike_shape clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate tests for ndi.calc.* objects graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load load binary data from spike_shape_calc document load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app spike_shape calculator that produces spike waveform shapes in an epoch struct2doc create an ndi.document from an input structure and input parameters test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/spike_shape.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.vis.spike_shape/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.spike_shape/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.spike_shape/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.vis.spike_shape/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for ndi.calc.example.spike_shape</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Creates a spike_shape_calc document given input parameters.\n\n  The document that is created spike_shape has an 'answer' that is given\n  by the input parameters.\n  check inputs\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.vis.spike_shape/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.vis.spike_shape/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n\n  In this abstract class, B is always 1 and ERRORMSG is always an empty string.\n\n  Developer's note: this method should be overridden in each calculator object.\n\nHelp for ndi.calc.vis.spike_shape/compare_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  In the base class, this examines the parameters_specifications for\n  fixed 'depends_on' entries (entries that have both a 'name' and a 'value').\n  If it finds any, it creates a query indicating that the 'depends_on' field\n  must match the specified name and value.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.spike_shape/default_parameters_query is inherited from superclass ndi.calculator\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.vis.spike_shape.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.vis.spike_shape/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.vis.spike_shape/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - return the about information for an NDI calculator</p> <pre><code>TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.spike_shape/doc_about is inherited from superclass ndi.calculator\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.vis.spike_shape.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.spike_shape/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate tests for ndi.calc. objects*</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(CSTEST_OBJ,...\n     SCOPE, NUMBER_OF_TESTS)\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS is the number of tests to generate.\n\nHelp for ndi.calc.vis.spike_shape/generate_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.vis.spike_shape.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its ndi.document id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overridden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.spike_shape/is_valid_dependency_input is inherited from superclass ndi.calculator\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.vis.spike_shape/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.vis.spike_shape/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load - load binary data from spike_shape_calc document</p> <pre><code>[MEAN_WAVES, STD_WAVES, SAMPLE_TIMES] = LOAD(NDI_CALCULATOR_OBJ, DOC_ID)\n\n  Loads the mean waveforms MEAN_WAVES and standard deviation waveforms STD_WAVES\n  from document with id DOC_ID. \n\n  MEAN_WAVES has the form MxCxT, where M is the number of samples per mean spike waveform,\n    C is the number of channels, and T is the time measurement.\n  STD_WAVES has the form MxCxT, where M is the number of samples per standard deviation spike waveform,\n    C is the number of channels, and T is the time measurement.\n  SAMPLES_TIMES is an Mx1 vector with the sample times of each spike waveform.\n\n dirpath = [ndi_calculator_obj.session.path filesep 'ndiobjects'];\n fname = [dirpath filesep doc.document_properties.base.id '.vsw'];\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.vis.spike_shape/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.spike_shape/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.vis.spike_shape/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.vis.spike_shape/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.vis.spike_shape/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.spike_shape.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.spike_shape.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a plot of the tuning curve.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of those parameters.\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.vis.spike_shape.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.vis.spike_shape/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.spike_shape/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.vis.spike_shape/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.vis.spike_shape/searchquery is inherited from superclass ndi.app\n</code></pre> <p>spike_shape - calculator that produces spike waveform shapes in an epoch</p> <pre><code>SPIKE_SHAPE_CALC_OBJ = SPIKE_SHAPE_CALC(SESSION)\n\n  Creates a SPIKE_SHAPE_CALC ndi.calculator object\n\n    Documentation for ndi.calc.vis.spike_shape/spike_shape\n       doc ndi.calc.vis.spike_shape\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.spike_shape/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.vis.spike_shape/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.vis.spike_shape/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.vis.spike_shape/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.vis.spike_shape/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/temporal_frequency_tuning.m/","title":"CLASS ndi.calc.vis.temporal_frequency_tuning","text":"<pre><code>  TEMPORAL_FREQUENCY_TUNING - a temporal_frequency_tuning demonstration of an ndi.calculator object\n\n  TEMPORAL_FREQUENCY_TUNING_OBJ = TEMPORAL_FREQUENCY_TUNING(SESSION)\n\n  Creates a TEMPORAL_FREQUENCY_TUNING ndi.calculator object\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/temporal_frequency_tuning.m/#superclasses","title":"Superclasses","text":"<p>ndi.calculator, ndi.app, ndi.documentservice, ndi.app.appdoc, ndi.mock.ctest</p>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/temporal_frequency_tuning.m/#properties","title":"Properties","text":"Property Description fast_start session name doc_types doc_document_types doc_session base_scope"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/temporal_frequency_tuning.m/#methods","title":"Methods","text":"Method Description add_appdoc Load data from an application document appdoc_description return documentation for the type of document that is created by this calculator. are_input_parameters_equivalent are two sets of input parameters equivalent? calc_path CALC_PATH return the path to the ndi.calculator object calculate perform the calculator for ndi.calc.example.temporal_frequency_tuning calculate_temporal_frequency_indexes calculate contrast index values from a tuning curve clean_mock_docs remove mock/test documents clear_appdoc remove an ndi.app.appdoc document from a session database compare_mock_docs compare an expected calculation answer with an actual answer default_parameters_query what queries should be used to search for input parameters if none are provided? default_scope default scope types for ndi.mock.ctest object default_search_for_input_parameters default parameters for searching for inputs defaultstruct_appdoc return a default appdoc structure for a given APPDOC type doc2struct create an ndi.document from an input structure and input parameters doc_about return the about information for an NDI calculator docfiletext return the text in the requested documentation file find_appdoc find an ndi.app.appdoc document in the session database generate_mock_docs generate mock documents and expected answers for tests generate_mock_parameters generate mock parameters for testing ndi.calc.vis.oridir_tuning graphical_edit_calculator create and control a GUI to graphically edit an NDI calculator instance is_valid_dependency_input is a potential dependency input actually valid for this calculator? isequal_appdoc_struct are two APPDOC data structures the same (equal)? isvalid_appdoc_struct is an input structure a valid descriptor for an APPDOC? load_mock_expected_output load expected NDI document answer for a calculation loaddata_appdoc Load data from an application document mock_expected_filename file of expected NDI document answer for a calculation mock_path return the path to the stored mock example output documents newdocument return a new database document of type ndi.document based on an app parameter_default return the default parameter code for a given calculator_type parameter_examples return the parameter code examples for a given calculator_type plot provide a diagnostic plot to show the results of the calculator plot_parameters provide a diagnostic plot to show the results of the calculator, if appropriate run run calculator on all possible inputs that match some parameters search_for_calculator_docs search for previous calculators search_for_input_parameters search for valid inputs to the calculator searchquery return a search query for an ndi.document related to this app struct2doc create an ndi.document from an input structure and input parameters temporal_frequency_tuning a temporal_frequency_tuning demonstration of an ndi.calculator object test perform a test of an ndi.calculator object varappname return the name of the application for use in variable creation version_url return the app version and url write_mock_expected_output write"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/temporal_frequency_tuning.m/#methods-help","title":"Methods help","text":"<p>add_appdoc - Load data from an application document</p> <pre><code>[...] = ADD_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, ...\n      APPDOC_STRUCT, DOCEXISTSACTION, [additional arguments])\n\n  Creates a new ndi.document that is based on the type APPDOC_TYPE with creation data\n  specified by APPDOC_STRUCT.  [additional inputs] are used to find or specify the\n  NDI_document in the database. They are passed to the function FIND_APPDOC,\n  so see help FIND_APPDOC for the documentation for each app.\n\n  The DOC is returned as a cell array of NDI_DOCUMENTs (should have 1 entry but could have more than\n  1 if the document already exists).\n\n  If APPDOC_STRUCT is empty, then default values are used. If it is a character array, then it is\n  assumed to be a filename of a tab-separated-value text file. If it is an ndi.document, then it\n  is assumed to be an ndi.document and it will be converted to the parameters using DOC2STRUCT.\n\n  This function also takes a string DOCEXISTSACTION that describes what it should do\n  in the event that the document fitting the [additional inputs] already exists:\n  DOCEXISTACTION value      | Description\n  ----------------------------------------------------------------------------------\n  'Error'                   | An error is generating indicating the document exists.\n  'NoAction'                | The existing document is left alone. The existing ndi.document\n                            |    is returned in DOC.\n  'Replace'                 | Replace the document; note that this deletes all NDI_DOCUMENTS\n                            |    that depend on the original.\n  'ReplaceIfDifferent'      | Conditionally replace the document, but only if the\n                            |    the data structures that define the document are not equal.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/add_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>appdoc_description - return documentation for the type of document that is created by this calculator.</p> <pre><code>TEXT = APP_DOC_DESCRIPTION(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/appdoc_description is inherited from superclass ndi.calculator\n</code></pre> <p>are_input_parameters_equivalent - are two sets of input parameters equivalent?</p> <pre><code>B = ARE_INPUT_PARAMETERS_EQUIVALENT(NDI_CALCULATOR_OBJ, INPUT_PARAMETERS1, INPUT_PARAMETERS2)\n\n  Are two sets of input parameters equivalent? This function is used by\n  SEARCH_FOR_CALCULATOR_DOCS to determine whether potential documents\n  were actually generated by identical input parameters.\n\n  In the base class, the structures are first re-organized so that all one-dimensional\n  substructures are columns and then compared with vlt.data.eqlen(INPUT_PARAMETERS1, INPUT_PARAMETERS2).\n\n  It is necessary to \"columnize\" the substructures because Matlab does not not necessarily preserve that\n  orientation when data is written to or read from JSON.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/are_input_parameters_equivalent is inherited from superclass ndi.calculator\n</code></pre> <p>calc_path - CALC_PATH return the path to the ndi.calculator object</p> <pre><code>P = CALC_PATH(CTEST_OBJ)\n\n  Return the path of an ndi.calculator object.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/calc_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>calculate - perform the calculator for ndi.calc.example.temporal_frequency_tuning</p> <pre><code>DOC = CALCULATE(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Creates a temporal_frequency_tuning_calc document given input parameters.\n\n  The document that is created temporal_frequency_tuning\n  by the input parameters.\n  check inputs\n</code></pre> <p>calculate_temporal_frequency_indexes - calculate contrast index values from a tuning curve</p> <pre><code>TEMPORAL_FREQUENCY_PROPS_DOC = CALCULATE_TEMPORAL_FREQUENCY_INDEXES(NDI_TEMPORAL_FREQUENCY_TUNING_CALC_OBJ, TUNING_DOC)\n\n  Given a 1-dimensional tuning curve document, this function calculates contrast response\n  parameters and stores them in TEMPORAL_FREQUENCY_TUNING document TEMPORAL_FREQUENCY_PROPS_DOC.\n</code></pre> <p>clean_mock_docs - remove mock/test documents</p> <pre><code>Help for ndi.calc.vis.temporal_frequency_tuning/clean_mock_docs is inherited from superclass ndi.mock.ctest\n</code></pre> <p>clear_appdoc - remove an ndi.app.appdoc document from a session database</p> <pre><code>B = CLEAR_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Deletes the app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  B is 1 if the document is found, and 0 otherwise.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/clear_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>compare_mock_docs - compare an expected calculation answer with an actual answer</p> <pre><code>[B, ERRORMSG] = COMPARE_MOCK_DOCS(CTEST_OBJ, EXPECTED_DOC, ACTUAL_DOC, SCOPE)\n\n  Given an NDI document with the expected answer to a calculation (EXPECTED_DOC),\n  the ACTUAL_DOC computed, and the SCOPE (a string: 'standard', 'low_noise','high_noise'),\n  this function computes whether the ACTUAL_DOC is within an allowed tolerance of\n  EXPECTED_DOC.\n\n  B is 1 if the differences in the documents are within the tolerance of the class.\n  Otherwise, B is 0.\n  If B is 0, ERRORMSG is a string that indicates where the ACTUAL_DOC is out of tolerance.\n</code></pre> <p>default_parameters_query - what queries should be used to search for input parameters if none are provided?</p> <pre><code>QUERY = DEFAULT_PARAMETERS_QUERY(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  When one calls SEARCH_FOR_INPUT_PARAMETERS, it is possible to specify a 'query' structure to\n  select particular documents to be placed into the parameters 'depends_on' specification.\n  If one does not provide any 'query' structure, then the default values here are used.\n\n  The function returns:\n  |-----------------------|----------------------------------------------|\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\n  For the ndi.calc.stimulus.temporal_frequency_tuning_calc class, this looks for \n  documents of type 'stimulus_response_scalar' with 'response_type' fields\n  the contain 'mean' or 'F1'.\n</code></pre> <p>default_scope - default scope types for ndi.mock.ctest object</p> <pre><code>BASE_SCOPE = ndi.mock.ctest.default_scope();\n\n  Return a default base_scope structure for an ndi.mock.ctest object.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning.default_scope is inherited from superclass ndi.mock.ctest\n</code></pre> <p>default_search_for_input_parameters - default parameters for searching for inputs</p> <pre><code>PARAMETERS = DEFAULT_SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ)\n\n  Returns a list of the default search parameters for finding appropriate inputs\n  to the calculator. For temporal_frequency_tuning_calc, there is no appropriate default parameters\n  so this search will yield empty.\n</code></pre> <p>defaultstruct_appdoc - return a default appdoc structure for a given APPDOC type</p> <pre><code>APPDOC_STRUCT = DEFAULTSTRUCT_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE)\n\n  Return the default data structure for a given APPDOC_TYPE of an ndi.app.appdoc object.\n\n  In the base class, the blank version of the ndi.document is read in and the\n  default structure is built from the ndi.document's class property list.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/defaultstruct_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc2struct - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, SESSION, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this uses the property info in the ndi.document to load the data structure.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/doc2struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>doc_about - return the about information for an NDI calculator</p> <pre><code>TEXT = DOC_ABOUT(NDI_CALCULATOR_OBJ)\n\n  Returns the help information for the document type for an NDI\n  calculator object.\n\n  This function is intended to be called by external users or code.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/doc_about is inherited from superclass ndi.calculator\n</code></pre> <p>docfiletext - return the text in the requested documentation file</p> <pre><code>TEXT = ndi.calculator.docfiletext(CALCULATOR_TYPE, DOC_TYPE)\n\n  Returns the text of the documentation files.\n  CALCULATOR_TYPE should be the full object name of the calculator of interest.\n   (for example: 'ndi.calc.stimulus.tuningcurve' or 'ndi.calc.vis.contrasttuning')\n  DOC_TYPE should be the type of document requested ('general', 'output', 'searching for inputs')\n\n  Example:\n     text = ndi.calculator.docfiletext('ndi.calc.stimulus.tuningcurve','general');\n\nHelp for ndi.calc.vis.temporal_frequency_tuning.docfiletext is inherited from superclass ndi.calculator\n</code></pre> <p>find_appdoc - find an ndi.app.appdoc document in the session database</p> <pre><code>DOC = FIND_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional inputs])\n\n  Using search criteria that is supported by [additional inputs], FIND_APPDOC\n  searches the database for the ndi.document object DOC that is\n  described by APPDOC_TYPE.\n\n  DOC is always a cell array of all matching NDI_DOCUMENTs.\n\n  In this superclass, empty is always returned. Subclasses should override\n  this function to search for each document type.\n\n  The documentation for subclasses should be in the overridden function\n  APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/find_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>generate_mock_docs - generate mock documents and expected answers for tests</p> <pre><code>[DOCS, DOC_OUTPUT, DOC_EXPECTED_OUTPUT] = GENERATE_MOCK_DOCS(TEMPORAL_FREQ_CALC_OBJ, ...\n     SCOPE, NUMBER_OF_TESTS, ...)\n\n  Creates a set of documents to test ndi.calc.vis.temporal_frequency_tuning.\n\n  SCOPE is the scope to be tested: 'standard', 'low_noise', 'high_noise'\n  NUMBER_OF_TESTS indicates the number of tests to be performed.\n\n  DOCS{i} is the set of helper documents that may have been created\n    in generating the ith test.\n  DOC_OUTPUT{i} is the actual output of the calculator when operating on\n    DOCS{i} (the ith test).\n  DOC_EXPECTED_OUTPUT{i} is what the output of the calculator should be, if there\n    were no noise.\n\n  The quality of these outputs are evaluted using the function COMPARE_MOCK_DOCS\n  as part of the TEST function for ndi.calculator objects.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | generate_expected_docs(0)| Should we generate the expected docs? (That is,   |\n  |                          |   generate the \"right answer\"?) Use carefully.    |\n  |--------------------------|---------------------------------------------------|\n</code></pre> <p>generate_mock_parameters - generate mock parameters for testing ndi.calc.vis.oridir_tuning</p> <pre><code>[P, TOTAL] = ndi.calc.vis.generate_mock_parameters(scope, index)\n\n  Generates a parameter set for generating a mock document with a given index value.\n  P will be a row vector of parameters [a1 b1 a2 b2].\n  TOTAL is the total number of mock stimuli that are available to be generated.\n\n  SCOPE can be 'standard', 'low_noise', or 'high_noise'.\n  INDEX selects which parameters are used to generate a mock document (from 1..TOTAL, wrapped\n  using MOD).\n\n  add options for different scopes - see issue #27\n</code></pre> <p>graphical_edit_calculator - create and control a GUI to graphically edit an NDI calculator instance</p> <pre><code>GRAPHICAL_EDIT_CALCULATOR(...)\n\n  Creates and controls a graphical user interface for creating an instance of\n  an ndi.calculator object.\n\n  Usage by the user:\n\n    GRAPHICAL_EDIT_CALCULATOR('command','NEW','type','ndi.calc.TYPE','filename',filename,'name',name)\n       or\n    GRAPHICAL_EDIT_CALCULATOR('command','EDIT','filename',filename)\n\nHelp for ndi.calc.vis.temporal_frequency_tuning.graphical_edit_calculator is inherited from superclass ndi.calculator\n</code></pre> <p>is_valid_dependency_input - is a potential dependency input actually valid for this calculator?</p> <pre><code>B = IS_VALID_DEPENDENCY_INPUT(NDI_CALCULATOR_OBJ, NAME, VALUE)\n\n  Tests whether a potential input to a calculator is valid.\n  The potential dependency name is provided in NAME and its base id is\n  provided in VALUE.\n\n  The base class behavior of this function is simply to return true, but it\n  can be overriden if additional criteria beyond an ndi.query are needed to\n  assess if a document is an appropriate input for the calculator.\n</code></pre> <p>isequal_appdoc_struct - are two APPDOC data structures the same (equal)?</p> <pre><code>B = ISEQUAL_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT1, APPDOC_STRUCT2)\n\n  Returns 1 if the structures APPDOC_STRUCT1 and APPDOC_STRUCT2 are valid and equal. This is true if\n  APPDOC_STRUCT2\n  true if APPDOC_STRUCT1 and APPDOC_STRUCT2 have the same field names and same values and same sizes. That is,\n  B is vlt.data.eqlen(APPDOC_STRUCT1, APPDOC_STRUCT2).\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/isequal_appdoc_struct is inherited from superclass ndi.calculator\n</code></pre> <p>isvalid_appdoc_struct - is an input structure a valid descriptor for an APPDOC?</p> <pre><code>[B,ERRORMSG] = ISVALID_APPDOC_STRUCT(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT)\n\n  Examines APPDOC_STRUCT and determines whether it is a valid input for creating an\n  ndi.document described by APPDOC_TYPE. B is 1 if it is valid and 0 otherwise.\n\n  In the base class, B is always 0 with ERRORMSG 'Base class always returns invalid.'\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/isvalid_appdoc_struct is inherited from superclass ndi.app.appdoc\n</code></pre> <p>load_mock_expected_output - load expected NDI document answer for a calculation</p> <pre><code>DOC = LOAD_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, N)\n\n  Load the Nth stored ndi.document that contains the expected answer for the\n  Nth standard mock test.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/load_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre> <p>loaddata_appdoc - Load data from an application document</p> <pre><code>[...] = LOADDATA_APPDOC(NDI_APPDOC_OBJ, APPDOC_TYPE, [additional arguments])\n\n  Loads the data from app document of style DOC_NAME from the database.\n  [additional inputs] are used to find the NDI_document in the database.\n  They are passed to the function FIND_APPDOC, so see help FIND_APPDOC for the documentation\n  for each app.\n\n  In the base class, this always returns empty. This function should be overridden by each\n  subclass.\n\n  The documentation for subclasses should be in the overridden function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/loaddata_appdoc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>mock_expected_filename - file of expected NDI document answer for a calculation</p> <pre><code>FNAME = MOCK_EXPECTED_FILENAME(CTEST_OBJ, N)\n\n  Return the filename for the Nth stored ndi.document that contains the expected\n  answer for the Nth standard mock test.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/mock_expected_filename is inherited from superclass ndi.mock.ctest\n</code></pre> <p>mock_path - return the path to the stored mock example output documents</p> <pre><code>MP = MOCK_PATH(CTEST_OBJ)\n\n  Returns the path to the mock document example outputs.\n  The returned path ends in a file separator.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/mock_path is inherited from superclass ndi.mock.ctest\n</code></pre> <p>newdocument - return a new database document of type ndi.document based on an app</p> <pre><code>NDI_DOCUMENT_OBJ = NEWDOCUMENT(NDI_APP_OBJ)\n\n  Creates a blank ndi.document object of type 'app'. The 'app.name' field\n  is filled out with the name of NDI_APP_OBJ.VARAPPNAME().\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/newdocument is inherited from superclass ndi.app\n</code></pre> <p>parameter_default - return the default parameter code for a given calculator_type</p> <pre><code>[CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the default parameter code CONTENTS for a given CALCULATOR_TYPE. CONTENTS is a\n  character string.\n\n  Example:\n    [contents] = ndi.calculator.parameter_default('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.temporal_frequency_tuning.parameter_default is inherited from superclass ndi.calculator\n</code></pre> <p>parameter_examples - return the parameter code examples for a given calculator_type</p> <pre><code>[NAMES, CONTENTS] = ndi.calculator.parameter_examples(CALCULATOR_TYPE)\n\n  Return the example NAMES and parameter example code CONTENTS for a given CALCULATOR_TYPE.\n\n  NAMES is a cell array of strings with the code example names. CONTENTS is a cell array of strings with\n  the contents of the code examples.\n\n  Example:\n    [names,contents] = ndi.calculator.parameter_examples('ndi.calc.stimulus.tuningcurve');\n\nHelp for ndi.calc.vis.temporal_frequency_tuning.parameter_examples is inherited from superclass ndi.calculator\n</code></pre> <p>plot - provide a diagnostic plot to show the results of the calculator</p> <pre><code>H=PLOT(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a plot of the tuning curve.\n\n  Handles to the figure, the axes, and any objects created are returned in H.\n\n  This function takes additional input arguments as name/value pairs.\n  See ndi.calculator.plot_parameters for a description of many parameters.\n  Also takes:\n  |----------------------|-------------------------------------------------------|\n  | Parameter (default)  | Description                                           |\n  |----------------------|-------------------------------------------------------|\n  | useAbsolute (0)      | Plot the absolute value of the responses and fits of  |\n  |                      |   absolute value.                                     |\n  |----------------------|-------------------------------------------------------|\n</code></pre> <p>plot_parameters - provide a diagnostic plot to show the results of the calculator, if appropriate</p> <pre><code>PLOT_PARAMETERS(NDI_CALCULATOR_OBJ, DOC_OR_PARAMETERS, ...)\n\n  Produce a diagnostic plot that can indicate to a reader whether or not\n  the calculator has been performed in a manner that makes sense with\n  its input data. Useful for debugging / validating a calculator.\n\n  By default, this plot is made in the current axes.\n\n  This function takes additional input arguments as name/value pairs:\n  |---------------------------|--------------------------------------|\n  | Parameter (default)       | Description                          |\n  |---------------------------|--------------------------------------|\n  | newfigure (0)             | 0/1 Should we make a new figure?     |\n  | holdstate (0)             | 0/1 Should we preserve the 'hold'    |\n  |                           |   state of the current axes?         |\n  | suppress_x_label (0)      | 0/1 Should we suppress the x label?  |\n  | suppress_y_label (0)      | 0/1 Should we suppress the y label?  |\n  | suppress_z_label (0)      | 0/1 Should we suppress the z label?  |\n  | suppress_title (0)        | 0/1 Should we suppress the title?    |\n  |---------------------------|--------------------------------------|\n\nHelp for ndi.calc.vis.temporal_frequency_tuning.plot_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>run - run calculator on all possible inputs that match some parameters</p> <pre><code>DOCS = RUN(NDI_CALCULATOR_OBJ, DOCEXISTSACTION, PARAMETERS)\n\n  DOCEXISTSACTION can be 'Error', 'NoAction', 'Replace', or 'ReplaceIfDifferent'\n  For calculators, 'ReplaceIfDifferent' is equivalent to 'NoAction' because\n  the input parameters define the calculator.\n\n  This function is primarily intended to be called by external programs and users.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/run is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_calculator_docs - search for previous calculators</p> <pre><code>[DOCS] = SEARCH_FOR_CALCULATOR_DOCS(NDI_CALCULATOR_OBJ, PARAMETERS)\n\n  Performs a search to find all previously-created calculator\n  documents that this mini-app creates.\n\n  PARAMETERS is a structure with the following fields\n  |------------------------|----------------------------------|\n  | Fieldname              | Description                      |\n  |-----------------------------------------------------------|\n  | input_parameters       | A structure of input parameters  |\n  |                        |  needed by the calculator.       |\n  | depends_on             | A structure with fields 'name'   |\n  |                        |  and 'value' that indicates any  |\n  |                        |  exact matches that should be    |\n  |                        |  satisfied.                      |\n  |------------------------|----------------------------------|\n\n  in the abstract class, this returns empty\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/search_for_calculator_docs is inherited from superclass ndi.calculator\n</code></pre> <p>search_for_input_parameters - search for valid inputs to the calculator</p> <pre><code>PARAMETERS = SEARCH_FOR_INPUT_PARAMETERS(NDI_CALCULATOR_OBJ, PARAMETERS_SPECIFICATION)\n\n  Identifies all possible sets of specific input PARAMETERS that can be\n  used as inputs to the calculator. PARAMETERS is a cell array of parameter\n  structures with fields 'input_parameters' and 'depends_on'.\n\n  This function is primarily intended as an internal function but is left exposed\n  (not private) so that it can be used for debugging. But in general, user code should\n  not call this function.\n\n  PARAMETERS_SPECIFICATION is a structure with the following fields:\n  |----------------------------------------------------------------------|\n  | input_parameters      | A structure of fixed input parameters needed |\n  |                       |   by the calculator. Should not depend on   |\n  |                       |   values in other documents.                 |\n  | depends_on            | A structure with 'name' and 'value' fields   |\n  |                       |   that lists specific inputs that should be  |\n  |                       |   used for the 'depends_on' field in the     |\n  |                       |   PARAMETERS output.                         |\n  | query                 | A structure with 'name' and 'query' fields   |\n  |                       |   that describes a search to be performed to |\n  |                       |   identify inputs for the 'depends_on' field |\n  |                       |   in the PARAMETERS output.                  |\n  |-----------------------|-----------------------------------------------\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/search_for_input_parameters is inherited from superclass ndi.calculator\n</code></pre> <p>searchquery - return a search query for an ndi.document related to this app</p> <pre><code>C = SEARCHQUERY(NDI_APP_OBJ)\n\n  Returns a cell array of strings that allow the creation or searching of an\n  ndi.database document for this app with field 'app' that has subfield 'name' equal\n  to the app's VARAPPNAME.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/searchquery is inherited from superclass ndi.app\n</code></pre> <p>struct2doc - create an ndi.document from an input structure and input parameters</p> <pre><code>DOC = STRUCT2DOC(NDI_APPDOC_OBJ, APPDOC_TYPE, APPDOC_STRUCT, [additional parameters]\n\n  Create an ndi.document from a data structure APPDOC_STRUCT. The ndi.document is created\n  according to the APPDOC_TYPE of the NDI_APPDOC_OBJ.\n\n  In the base class, this always returns empty. It must be overridden in subclasses.\n  The documentation for overridden functions should be in the function APPDOC_DESCRIPTION.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/struct2doc is inherited from superclass ndi.app.appdoc\n</code></pre> <p>temporal_frequency_tuning - a temporal_frequency_tuning demonstration of an ndi.calculator object</p> <pre><code>TEMPORAL_FREQUENCY_TUNING_OBJ = TEMPORAL_FREQUENCY_TUNING(SESSION)\n\n  Creates a TEMPORAL_FREQUENCY_TUNING ndi.calculator object\n\n    Documentation for ndi.calc.vis.temporal_frequency_tuning/temporal_frequency_tuning\n       doc ndi.calc.vis.temporal_frequency_tuning\n</code></pre> <p>test - perform a test of an ndi.calculator object</p> <pre><code>[B, ERRORMSG] = test(CTEST_OBJ, SCOPE, NUMBER_OF_TESTS, PLOT_IT, VARARGIN)\n\n  Perform tests of the calculator for a certain SCOPE.\n\n  B is a NUMBER_OF_TESTS x NUMBER_OF_TESTS array of whether the comparisons\n    of the expected output of test i and actual output of test j are equal.\n    Generally, b(i,i) should be 1 for all tests, and b(i,j) for i~=j should\n    be 0, although results might be close enough for some comparisons to be\n    equal even if there are no errors. If test indices are\n    specified, B becomes a numel(specific_test_inds) x\n    numel(specific_test_inds) array.\n\n  ERRORMSG{i,j} is any error message given if the comparison between the\n    expected outcome of test i and the actual outcome of test j.\n\n  B_EXPECTED is the result of the comparisons between the expected\n    outcome of test i and the expected outcome of test j. Some tests\n    might have the same expected outcome, which can be useful for\n    interpreting the results in B.\n\n  SCOPE should be one of 'standard', 'low_noise', or 'high_noise'.\n    'standard' performs tests on specific hard-coded inputs.\n    'low_noise' performs tests on specific hard-coded inputs with small amounts\n       of noise added.\n    'high_noise' performs tests on specific hard-coded inputs with large amounts\n       of noise added.\n\n  NUMBER_OF_TESTS indicates the number of tests to perform.\n  PLOT_IT indicates (0/1) whether or not the results should be plotted.\n\n  This function's behavior can be modified by name/value pairs.\n  --------------------------------------------------------------------------------\n  | Parameter (default):     | Description:                                      |\n  |--------------------------|---------------------------------------------------|\n  | specific_test_inds([])   | Should we specify which tests to run?             |\n  |--------------------------|---------------------------------------------------|\n\n  Step 1: generate_mock_docs\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/test is inherited from superclass ndi.mock.ctest\n</code></pre> <p>varappname - return the name of the application for use in variable creation</p> <pre><code>AN = VARAPPNAME(NDI_APP_OBJ)\n\n  Returns the name of the app modified for use as a variable name, either as\n  a Matlab variable or a name in a document.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/varappname is inherited from superclass ndi.app\n</code></pre> <p>version_url - return the app version and url</p> <pre><code>[V, URL] = VERSION_URL(NDI_APP_OBJ)\n\n  Return the version and url for the current app. In the base class,\n  it is assumed that GIT is used and is available from the command line\n  and the version and url are read from the git directory.\n\n  Developers should override this method in their own class if they use a\n  different version control system.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/version_url is inherited from superclass ndi.app\n</code></pre> <p>write_mock_expected_output - write</p> <pre><code>B = WRITE_MOCK_EXPECTED_OUTPUT(CTEST_OBJ, NUMBER, DOC)\n\n  Set the expected mock document for mock calculation NUMBER to\n  be the ndi.document DOC.\n\n  This function will not overwrite an existing expected mock document.\n  It must be deleted manually to ensure programmer really wants to overwrite it.\n\nHelp for ndi.calc.vis.temporal_frequency_tuning/write_mock_expected_output is inherited from superclass ndi.mock.ctest\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/%2Btest/contrast_tuning_compare_docs.m/","title":"ndi.calc.vis.test.contrast_tuning_compare_docs","text":"<pre><code>  Comparing Contrast_tuning\n\n  [B, ERRORMSG] = ndi.calc.vis.test.contrast_tuning_compare_docs(DOC_EXPECTED, DOC_ACTUAL, SCOPE)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/%2Btest/contrastsensitivity_calc_compare_docs.m/","title":"ndi.calc.vis.test.contrastsensitivity_calc_compare_docs","text":"<pre><code>  contrastsensitivity_calc_compare_docs\n\n  [B, ERRORMSG] = ndi.calc.vis.test.contrastsensitivity_calc_compare_docs(DOC_EXPECTED, DOC_ACTUAL, SCOPE)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/%2Btest/hartley_reverse_correlation_compare_docs.m/","title":"ndi.calc.vis.test.hartley_reverse_correlation_compare_docs","text":"<pre><code>  hartley_reverse_correlation_compare_docs\n\n  [B, ERRORMSG] = ndi.calc.vis.test.hartley_reverse_correlation_compare_docs(DOC_EXPECTED, DOC_ACTUAL, SCOPE)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/%2Btest/oridir_compare_docs.m/","title":"ndi.calc.vis.test.oridir_compare_docs","text":"<pre><code>  ORIDIR_COMPARE_DOCS\n\n  [B, ERRORMSG] = ndi.calc.vis.test.oridir_compare_docs(DOC_EXPECTED, DOC_ACTUAL, SCOPE)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/%2Btest/oridir_compare_docs_older.m/","title":"ndi.calc.vis.test.oridir_compare_docs_older","text":"<pre><code>  ORIDIR_COMPARE_DOCS\n\n  [B, ERRORMSG] = ndi.calc.vis.test.oridir_compare_docs(DOC_EXPECTED, DOC_ACTUAL, SCOPE)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/%2Btest/spatial_frequency_tuning_compare_docs.m/","title":"ndi.calc.vis.test.spatial_frequency_tuning_compare_docs","text":"<pre><code>  Comparing spatial_frequency_tuning\n\n  [B, ERRORMSG] = ndi.calc.vis.test.spatial_frequency_tuning_compare_docs(DOC_EXPECTED, DOC_ACTUAL, SCOPE)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/%2Btest/speed_tuning_compare_docs.m/","title":"ndi.calc.vis.test.speed_tuning_compare_docs","text":"<pre><code>  Speed_Tuning_Compare_Docs\n\n  [B, ERRORMSG] = ndi.calc.vis.test.speed_tuning_compare_docs(DOC_EXPECTED, DOC_ACTUAL, SCOPE)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bcalc/%2Bvis/%2Btest/temporal_frequency_tuning_compare_docs.m/","title":"ndi.calc.vis.test.temporal_frequency_tuning_compare_docs","text":"<pre><code>  Comparing temporal_frequency_tuning\n\n  [B, ERRORMSG] = ndi.calc.vis.test.temporal_frequency_tuning_compare_docs(DOC_EXPECTED, DOC_ACTUAL, SCOPE)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bfun/%2Bspiketrains/mean_spike_waveforms.m/","title":"ndi.fun.spiketrains.mean_spike_waveforms","text":"<pre><code>  MEAN_SPIKE_WAVEFORMS - find mean spike waveforms in a voltage recording\n\n  [MEAN_WAVES,STD_WAVES,PARAMETERS] = MEAN_SPIKE_WAVEFORMS(S, SPIKING_ELEMENT, EPOCH_ID, ...)\n\n  Given an ndi.element of type 'spikes' that is derived from a voltage (SPIKING_ELEMENT),\n  recording, returns mean and standard deviation waveforms from different places\n  in the recording. The mean is computed in different intervals in the recording EPOCH_ID \n  specified by a parameter 'averaging_window', which defaults to 60 s. This means that\n  mean waveforms are computed in the first averaging_window, the second averaging_window,\n  etc., until the end of the recording. \n\n  WAVES is an MxCxT matrix where M is the number of samples around the spike\n    that are examined, C is the number of channels, and T is the number of\n    times that the mean waveform is examined. Any bins with no spikes will be\n    coded as NaN values.\n  STD_WAVES is an MxCxT matrix, the same size as WAVES, that has the standard\n    deviation of the spike waves. Any bins with no spikes will be coded as \n    NaN values.\n  PARAMETERS is a structure with the following fields:\n    interval_center_times - the center time of each averaging_window\n    number_of_spikes_per_interval - the number of spikes in each interval\n    sample_times - the relative times of each spike waveform\n    s0 - number of samples before spike sample that were read\n    s1 - number of samples after spike sample that were read\n    sample_rate - the sampling rate of the probe\n\n\n  This function takes name/value parameters that modify its behavior:\n  ---------------------------------------------------------------------------\n  | Parameter (default)      | Description                                  |\n  |--------------------------|----------------------------------------------|\n  | spike_window_before_time | How long before each spike time should we    |\n  |  (-0.001)                |   retrieve for our waveforms? (In seconds.)  |\n  |                          |   Usually negative to indicate times before  |\n  |                          |   the spike.                                 |\n  | spike_window_after_time  | How long after each spike time should we     |\n  |  ( 0.002)                |   retrieve for our waveforms? (In seconds.)  |\n  |                          |   Usually positive to indicate times after   |\n  |                          |   the spike.                                 |\n  | averaging_window (60)    | How long should the averaging window be?     |\n  |                          |   (Seconds.) A mean and standard deviation of|\n  |                          |   the waveform is constructed every interval.|\n  | averaging_window_step    | How long should the step be between averaging|\n  |       (300)              |   windows? (Seconds.)\n  | filter_padding (0.100)   | Extra time to read before and after each     |\n  |                          |   spike for filtering.                       |\n  | cheby_order (4)          | Chebyshev Type I filter order                |\n  | cheby_R (0.5)            | Chebyshev Type I filter roll off R parameter |\n  | cheby_cutoff (300)       | Chebyshev Type I high pass cut off frequency |\n  |--------------------------|----------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bndi/%2Btest/values_within_tolerance.m/","title":"ndi.test.values_within_tolerance","text":"<pre><code>  VALUES_WITHIN_TOLERANCE - check to see if values are within a tolerance\n\n  [B,MSG] = VALUES_WITHIN_TOLERANCE(V1, V2, TOLERANCE, FIELDNAME)\n\n  This function performs a number of checks on the values of arrays V1 and V2.\n   a) It checks to make sure the arrays are the same size.\n   b) It checks to make sure no values differ by an amount greater than TOLERANCE \n\n  If both tests pass, then B is 1 and MSG is blank/empty ('').\n  If either test fails, then B is 0 and MSG contains an error message as to \n  how it failed.\n\n  Example:\n   v1 = [ 1 2 3 ];\n   v2 = [ 1 2 3 ];\n   v3 = [ 1 2 ];\n   v4 = [ 1 2 4];\n\n  [b1,msg1] = ndi.test.values_within_tolerance(v1, v2, 0, 'myfield')\n   % b1 is 1, msg1 is ''\n  [b2,msg2] = ndi.test.values_within_tolerance(v1, v3, 0, 'myfield')\n   % b2 is 0, msg2 is 'Arrays of myfield are not the same size'\n  [b3,msg3] = ndi.test.values_within_tolerance(v1, v4, 0, 'myfield')\n   % b3 is 0, msg3 is 'Differences in arrays of myfield exceed the tolerance provided (0)'];\n</code></pre>"},{"location":"reference/%2Bndi/%2Btest/%2Bcalc/%2Bmock/%2Boridir_tuning/generate_mock_docs.m/","title":"ndi.test.calc.mock.oridir_tuning.generate_mock_docs","text":"<pre><code>  GENERATE_MOCK_DOCS - test generate mock documents for ndi.calc.vis.oridir_tuning\n\n  OUTPUT = GENERATE_MOCK_DOCS(S)\n\n  Generate mock docs for ndi.calc.vis.oridir_tuning calculator\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/plot_resp_sftf.m/","title":"ndi.viz.plot_resp_sftf","text":"<pre><code>  viz.plot_bayes_sftf - plot an array of bayesian theta_pref likelihoods for a range of SF and TF preferences\n\n  Plots in current axes\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/contrast_struct.m/","title":"ndi.viz.bigtable.contrast_struct","text":"<pre><code>ndi.viz.bigtable.contrast_struct is a function.\n    [thestruct] = ndi.viz.bigtable.contrast_struct(fit_doc, stimulus_response_doc, response_type, f1f0_struct, varargin)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/dir_struct.m/","title":"ndi.viz.bigtable.dir_struct","text":"<pre><code>ndi.viz.bigtable.dir_struct is a function.\n    [thestruct] = ndi.viz.bigtable.dir_struct(fit_doc, stimulus_response_doc, response_type, f1f0_struct, varargin)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/element_struct.m/","title":"ndi.viz.bigtable.element_struct","text":"<pre><code>  ELEMENT_STRUCT - make a structure based on an ndi element document\n\n  ESTRUCT = ELEMENT_STRUCT(S, ELEMENT_DOC)\n\n  Creates a structure with the element full name, name, reference,...\n   class, type, session ID, and document ID.\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/element_subject.m/","title":"ndi.viz.bigtable.element_subject","text":"<pre><code>  ELEMENT_SUBJECT - return elements and subject information for a session/dataset\n\n  T = ELEMENT_SUBJECT(S, ELEMENT_TYPE)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/freq_struct.m/","title":"ndi.viz.bigtable.freq_struct","text":"<pre><code>ndi.viz.bigtable.freq_struct is a function.\n    [thestruct] = ndi.viz.bigtable.freq_struct(tuning_doc, stimulus_response_doc, response_type, f1f0_struct, varargin)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/prependvarnames.m/","title":"ndi.viz.bigtable.prependvarnames","text":"<pre><code>  PREPENDVARNAMES - add a prefix to variable names of a table\n\n  T_OUT = PREPENDVARNAMES(T, PREFIX)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/stimtunefitT2features.m/","title":"ndi.viz.bigtable.stimtunefitT2features","text":"<pre><code>ndi.viz.bigtable.stimtunefitT2features is a function.\n    T_out = ndi.viz.bigtable.stimtunefitT2features(stimtunefit_table, tablefunc)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tc_table.m/","title":"ndi.viz.bigtable.tc_table","text":"<pre><code>ndi.viz.bigtable.tc_table is a function.\n    [t] = ndi.viz.bigtable.tc_table(tuning_doc, stimulus_response_doc, response_type, f1f0_struct, varargin)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tuning_curve.m/","title":"ndi.viz.bigtable.tuning_curve","text":"<pre><code>ndi.viz.bigtable.tuning_curve is a function.\n    [bigtable] = ndi.viz.bigtable.tuning_curve(S, element_name, element_ref, table_func, varargin)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tuning_curve2.m/","title":"ndi.viz.bigtable.tuning_curve2","text":"<pre><code>ndi.viz.bigtable.tuning_curve2 is a function.\n    [bigtable] = ndi.viz.bigtable.tuning_curve2(S, element_name, element_ref, table_func, varargin)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tuning_curve_dir.m/","title":"ndi.viz.bigtable.tuning_curve_dir","text":"<pre><code>ndi.viz.bigtable.tuning_curve_dir is a function.\n    big_dir_table = ndi.viz.bigtable.tuning_curve_dir(S, element_name, element_ref, condition_name, tuning_curve_search_string, element_type, acceptable_response_types)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tuning_curve_dir2.m/","title":"ndi.viz.bigtable.tuning_curve_dir2","text":"<pre><code>ndi.viz.bigtable.tuning_curve_dir2 is a function.\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tuning_curve_sf.m/","title":"ndi.viz.bigtable.tuning_curve_sf","text":"<pre><code>ndi.viz.bigtable.tuning_curve_sf is a function.\n    big_sf_table = ndi.viz.bigtable.tuning_curve_sf(S, element_name, element_ref, condition_name, tuning_curve_search_string, element_type, acceptable_response_types)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tuning_curve_sf2.m/","title":"ndi.viz.bigtable.tuning_curve_sf2","text":"<pre><code>ndi.viz.bigtable.tuning_curve_sf2 is a function.\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tuning_curve_struct.m/","title":"ndi.viz.bigtable.tuning_curve_struct","text":"<pre><code>  This function can be modified by the following name/value pairs:\n  |--------------------------------|------------------------------------------|\n  | Parameters (default)           | Description                              |\n  |--------------------------------|------------------------------------------|\n  | tuning_curve_search_string     | `independent_variable_label`  search     |\n  |  ('Temporal Frequency')        |   string of `stimulus_tuningcurve`       |\n  | fit_doc_type ('')              | Doc type to search for (e.g.,            |\n  |                                |  `temporal_frequency_tuning_calc`)       |\n  | element_type ('spikes')        | Element type?                            |\n  | search_query ([])              | An additional ndi.query for the search   |\n  | acceptable_response_types      | Response types to include in table       |\n  |    ({'mean','F1'})             |  (e.g., 'mean', 'F1', 'F2')              |\n  |--------------------------------|------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tuning_curve_tf.m/","title":"ndi.viz.bigtable.tuning_curve_tf","text":"<pre><code>ndi.viz.bigtable.tuning_curve_tf is a function.\n    big_tf_table = ndi.viz.bigtable.tuning_curve_tf(S, element_name, element_ref, condition_name, tuning_curve_search_string, element_type, acceptable_response_types)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bbigtable/tuning_curve_tf2.m/","title":"ndi.viz.bigtable.tuning_curve_tf2","text":"<pre><code>ndi.viz.bigtable.tuning_curve_tf2 is a function.\n    big_tf_table = ndi.viz.bigtable.tuning_curve_tf2(S, element_name, element_ref, condition_name, tuning_curve_search_string, element_type, acceptable_response_types)\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bfun/stimuluspurpose2stimulusresponse.m/","title":"ndi.viz.fun.stimuluspurpose2stimulusresponse","text":"<pre><code>  STIMULUSPURPOSE2STIMULUSRESPONSE - get stimulus response documents based on purpose\n\n  D = STIMULUSPURPOSE2STIMULUSRESPONS(S, STIMULUS_PURPOSE)\n\n  Return ndi.document objects of type stimulus_response for the\n  stimulator epoch with purpose name STIMULUS_PURPOSE.\n  If no stimulus purpose match is found, then docs is {}.\n\n  See also: stimuluspurpose2stimulusresponsequery\n\n  Example:\n     docs = ndi.viz.fun.stimuluspurpose2stimulusresponse(S, 'Purpose: Assessing contrast tuning');\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bfun/stimuluspurpose2stimulusresponsequery.m/","title":"ndi.viz.fun.stimuluspurpose2stimulusresponsequery","text":"<pre><code>  STIMULUSPURPOSE2STIMULUSRESPONSEQUERY - get query for stimulus response documents based on purpose\n\n  Q = STIMULUSPURPOSE2STIMULUSRESPONSEQUERY(S, STIMULUS_PURPOSE)\n\n  Return an ndi.query object that will find stimulus_response documents for the \n  stimulator epoch with purpose name STIMULUS_PURPOSE.\n  If no stimulus purpose match is found, then q is ndi.query('','isa','nothing') .\n\n  Example:\n     q = ndi.viz.fun.stimuluspurpose2stimulusresponsequery(S, 'Purpose: Assessing contrast tuning');\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bfun/stimuluspurpose2tuning.m/","title":"ndi.viz.fun.stimuluspurpose2tuning","text":"<pre><code>  STIMULUSPURPOSE2TUNING - get stimulus tuning and fit docs from stimulus purpose\n\n  [TUNING_DOCS, FIT_DOCS, STIM_RESP_DOCS, RESP_TYPE] = STIMULUSPURPOSE2TUNING(S, PURPOSE, PURPOSE_SHORT, INDEPENDENT_VAR, TUNING_CLASS, ACCEPTABLE_RESPONSE_TYPES)\n\n  Returns cell arrays of tuning documents, fit documents, stimulus response docs, and the text representation of response type.\n  The ith entry of each cell array corresponds to the ith array of each other cell array.\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bvis/plot_oridir.m/","title":"ndi.viz.vis.plot_oridir","text":"<pre><code>  PLOT_ORIDIR - visualize temporal frequency results across conditions\n\n  STATS = PLOT_ORIDIR(TBL, CONDITION_NAME, REFERENCE_GROUP, GROUP_NAME, ...)\n\n  Given a table TBL and table column name that describes the different experimental\n  conditions CONDITION_NAME and the name of the REFERENCE_GROUP (the condition\n  that is the control) and the name of a column that determines random factors\n  (GROUP_NAME), plots many features relevant for ORIENTATION/DIRECTION tuning.\n\n  The fields that are examined are as follows:\n    [prefix '_DIR_empirical_low_pass_index']\n    [prefix '_DIR_ultimate_Pref']\n    [prefix '_DIR_fitless_bandwidth']\n    [prefix '_DIR_empirical_high_pass_index']\n    [prefix '_DIR_empirical_max_response_value']\n\n\n  The function takes options as name/value pairs:\n  ----------------------------------------------------------------------------------\n  | Parameter (default)          | Description                                     |\n  |------------------------------|-------------------------------------------------|\n  |prefix ('best')               | The prefix to be applied in front of temporal   |\n  |                              |    frequency tuning fields.                     |\n  | colors (vlt.plot.colorlist())| The colors that should be assigned to the       |\n  |                              |    conditions.                                  |\n  | group_line_color([1 1 0])    | The group mean line color.                      |\n  |------------------------------|-------------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bvis/plot_oridir2.m/","title":"ndi.viz.vis.plot_oridir2","text":"<pre><code>  PLOT_ORIDIR - visualize temporal frequency results across conditions\n\n  STATS = PLOT_ORIDIR(TBL, CONDITION_NAME, REFERENCE_GROUP, GROUP_NAME, ...)\n\n  Given a table TBL and table column name that describes the different experimental\n  conditions CONDITION_NAME and the name of the REFERENCE_GROUP (the condition\n  that is the control) and the name of a column that determines random factors\n  (GROUP_NAME), plots many features relevant for ORIENTATION/DIRECTION tuning.\n\n  The fields that are examined are as follows:\n    [prefix '_DIR_empirical_low_pass_index']\n    [prefix '_DIR_ultimate_Pref']\n    [prefix '_DIR_fitless_bandwidth']\n    [prefix '_DIR_empirical_high_pass_index']\n    [prefix '_DIR_empirical_max_response_value']\n\n\n  The function takes options as name/value pairs:\n  ----------------------------------------------------------------------------------\n  | Parameter (default)          | Description                                     |\n  |------------------------------|-------------------------------------------------|\n  |prefix ('best')               | The prefix to be applied in front of temporal   |\n  |                              |    frequency tuning fields.                     |\n  | colors (vlt.plot.colorlist())| The colors that should be assigned to the       |\n  |                              |    conditions.                                  |\n  | group_line_color([1 1 0])    | The group mean line color.                      |\n  |------------------------------|-------------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bvis/plot_respmag.m/","title":"ndi.viz.vis.plot_respmag","text":"<pre><code>  PLOT_TF - visualize temporal frequency results across conditions\n\n  STATS = PLOT_TF(TBL, CONDITION_NAME, REFERENCE_GROUP, GROUP_NAME, ...)\n\n  Given a table TBL and table column name that describes the different experimental\n  conditions CONDITION_NAME and the name of the REFERENCE_GROUP (the condition\n  that is the control) and the name of a column that determines random factors\n  (GROUP_NAME), plots many features relevant for TEMPORAL FREQUENCY tuning.\n\n  The fields that are examined are as follows:\n    [prefix '_tf_empirical_low_pass_index']\n    [prefix '_tf_ultimate_Pref']\n    [prefix '_tf_fitless_bandwidth']\n    [prefix '_tf_empirical_high_pass_index']\n    [prefix '_tf_empirical_max_response_value']\n\n\n  The function takes options as name/value pairs:\n  ----------------------------------------------------------------------------------\n  | Parameter (default)          | Description                                     |\n  |------------------------------|-------------------------------------------------|\n  |prefix ('best')               | The prefix to be applied in front of temporal   |\n  |                              |    frequency tuning fields.                     |\n  | colors (vlt.plot.colorlist())| The colors that should be assigned to the       |\n  |                              |    conditions.                                  |\n  | group_line_color([1 1 0])    | The group mean line color.                      |\n  |------------------------------|-------------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bvis/plot_sf.m/","title":"ndi.viz.vis.plot_sf","text":"<pre><code>  PLOT_SF - visualize spatial frequency results across conditions\n\n  STATS = PLOT_SF(TBL, CONDITION_NAME, REFERENCE_GROUP, GROUP_NAME, ...)\n\n  Given a table TBL and table column name that describes the different experimental\n  conditions CONDITION_NAME and the name of the REFERENCE_GROUP (the condition\n  that is the control) and the name of a column that determines random factors\n  (GROUP_NAME), plots many features relevant for SPATIAL FREQUENCY tuning.\n\n  The fields that are examined are as follows:\n    [prefix '_sf_empirical_low_pass_index']\n    [prefix '_sf_ultimate_Pref']\n    [prefix '_sf_fitless_bandwidth']\n    [prefix '_sf_empirical_high_pass_index']\n    [prefix '_sf_empirical_max_response_value']\n\n  The function takes options as name/value pairs:\n  ----------------------------------------------------------------------------------\n  | Parameter (default)          | Description                                     |\n  |------------------------------|-------------------------------------------------|\n  |prefix ('best')               | The prefix to be applied in front of temporal   |\n  |                              |    frequency tuning fields.                     |\n  | colors (vlt.plot.colorlist())| The colors that should be assigned to the       |\n  |                              |    conditions.                                  |\n  | group_line_color([1 1 0])    | The group mean line color.                      |\n  |------------------------------|-------------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bvis/plot_sf2.m/","title":"ndi.viz.vis.plot_sf2","text":"<pre><code>  PLOT_SF - visualize temporal frequency results across conditions\n\n  STATS = PLOT_SF(TBL, CONDITION_NAME, REFERENCE_GROUP, GROUP_NAME, ...)\n\n  Given a table TBL and table column name that describes the different experimental\n  conditions CONDITION_NAME and the name of the REFERENCE_GROUP (the condition\n  that is the control) and the name of a column that determines random factors\n  (GROUP_NAME), plots many features relevant for SPATIAL FREQUENCY tuning.\n\n  The fields that are examined are as follows:\n    [prefix '_sf_empirical_low_pass_index']\n    [prefix '_sf_ultimate_Pref']\n    [prefix '_sf_fitless_bandwidth']\n    [prefix '_sf_empirical_high_pass_index']\n    [prefix '_sf_empirical_max_response_value']\n\n\n  The function takes options as name/value pairs:\n  ----------------------------------------------------------------------------------\n  | Parameter (default)          | Description                                     |\n  |------------------------------|-------------------------------------------------|\n  | prefix ('best')              | The prefix to be applied in front of temporal   |\n  |                              |    frequency tuning fields.                     |\n  | colors (vlt.plot.colorlist())| The colors that should be assigned to the       |\n  |                              |    conditions.                                  |\n  | group_line_color([1 1 0])    | The group mean line color.                      |\n  |------------------------------|-------------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bvis/plot_tf.m/","title":"ndi.viz.vis.plot_tf","text":"<pre><code>  PLOT_TF - visualize temporal frequency results across conditions\n\n  STATS = PLOT_TF(TBL, CONDITION_NAME, REFERENCE_GROUP, GROUP_NAME, ...)\n\n  Given a table TBL and table column name that describes the different experimental\n  conditions CONDITION_NAME and the name of the REFERENCE_GROUP (the condition\n  that is the control) and the name of a column that determines random factors\n  (GROUP_NAME), plots many features relevant for TEMPORAL FREQUENCY tuning.\n\n  The fields that are examined are as follows:\n    [prefix '_tf_empirical_low_pass_index']\n    [prefix '_tf_ultimate_Pref']\n    [prefix '_tf_fitless_bandwidth']\n    [prefix '_tf_empirical_high_pass_index']\n    [prefix '_tf_empirical_max_response_value']\n\n\n  The function takes options as name/value pairs:\n  ----------------------------------------------------------------------------------\n  | Parameter (default)          | Description                                     |\n  |------------------------------|-------------------------------------------------|\n  | prefix ('best')              | The prefix to be applied in front of temporal   |\n  |                              |    frequency tuning fields.                     |\n  | colors (vlt.plot.colorlist())| The colors that should be assigned to the       |\n  |                              |    conditions.                                  |\n  | group_line_color([1 1 0])    | The group mean line color.                      |\n  |------------------------------|-------------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bndi/%2Bviz/%2Bvis/plot_tf2.m/","title":"ndi.viz.vis.plot_tf2","text":"<pre><code>  PLOT_TF - visualize temporal frequency results across conditions\n\n  STATS = PLOT_TF(TBL, CONDITION_NAME, REFERENCE_GROUP, GROUP_NAME, ...)\n\n  Given a table TBL and table column name that describes the different experimental\n  conditions CONDITION_NAME and the name of the REFERENCE_GROUP (the condition\n  that is the control) and the name of a column that determines random factors\n  (GROUP_NAME), plots many features relevant for TEMPORAL FREQUENCY tuning.\n\n  The fields that are examined are as follows:\n    [prefix '_tf_empirical_low_pass_index']\n    [prefix '_tf_ultimate_Pref']\n    [prefix '_tf_fitless_bandwidth']\n    [prefix '_tf_empirical_high_pass_index']\n    [prefix '_tf_empirical_max_response_value']\n\n\n  The function takes options as name/value pairs:\n  ----------------------------------------------------------------------------------\n  | Parameter (default)          | Description                                     |\n  |------------------------------|-------------------------------------------------|\n  |prefix ('best')               | The prefix to be applied in front of temporal   |\n  |                              |    frequency tuning fields.                     |\n  | colors (vlt.plot.colorlist())| The colors that should be assigned to the       |\n  |                              |    conditions.                                  |\n  | group_line_color([1 1 0])    | The group mean line color.                      |\n  |------------------------------|-------------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bvis/vector2nasaltemporal.m/","title":"vis.vector2nasaltemporal","text":"<pre><code>  VECTOR2NASALTEMPORAL - convert a vector from eye view to up/down/nasal/temporal view\n\n  V_OUT = ndi.fun.vis.vector2nasaltemporal(V_IN, VIEWING_EYE)\n\n  Given a vector V_IN in degrees in compass coordinates with VIEWING_EYE\n  either 'left' or 'right, converts the vector to a coordinate system\n  such that the left half of the viewing field corresponds to 'temporal' and \n  the right half of the viewing field corresponds to 'nasal'.\n\n  Inputs: V_IN (degrees in compass coordinates)\n          VIEWING_EYE (can be 0 or false (left) or 1 or true (right), or the strings 'left' or 'right')\n\n  Example:\n    v_in = 90; % a right-ward vector\n    viewing_eye = 'right'; % this vector moves temporally\n    v_out = ndi.fun.vis.vector2nasaltemporal(v_in,viewing_eye);\n       % v_out == 270\n</code></pre>"},{"location":"reference/%2Bvis/%2Bcontrast/naka_rushton_fit.m/","title":"vis.contrast.naka_rushton_fit","text":"<pre><code>   naka_rushton Naka-Rushton fit (for contrast curves)\n\n    [RM,C50] = vlt.neuro.vision.contrast.naka_rushton_fit(C,DATA)\n\n    Finds the best fit to the Naka-Rushton function\n      R(c) = Rm*c/(C50+c)\n    where C is contrast (0-1), Rm is the maximum response, and C50 is the\n    half-maximum contrast.\n\n    [RM,C50,N] = vlt.neuro.vision.contrast.naka_rushton(C,DATA)\n\n    Finds the best fit to the Naka-Rushton function\n      R(c) = Rm*c^n/(C50+c^n)\n    where C is contrast (0-1), Rm is the maximum response, and C50 is the\n    half-maximum contrast.\n\n    [RM,C50,N,S] = vlt.neuro.vision.contrast.naka_rushton(C,DATA)\n    Finds the best fit to the Naka-Rushton function\n      R(c) = Rm*c^n/(C50^(s*n)+c^(s*n))\n    where C is contrast (0-1), Rm is the maximum response, and C50 is the\n    half-maximum contrast, and s is a saturation factor.\n\n    References:\n      Naka_Rushton fit was first described in \n      Naka, Rushton, J.Physiol. London 185: 536-555, 1966\n      and used to fit contrast data of cortical cells in  \n      Albrecht and Hamilton, J. Neurophys. 48: 217-237, 1982\n      The saturation form was described in Peirce 2007 J Vision\n\n  This function also takes additional arguments in the form of name-value\n  pairs:\n  |-----------------------------------------------------------------|\n  | Parameter (default)       | Description                         |\n  |---------------------------|-------------------------------------|\n  | init_rmax (max of r)      | Initial rmax search point           |\n  | min_rmax (0)              | Minimum rmax value                  |\n  | max_rmax (Inf)            | Maximum rmax value                  |\n  | initc50 (contrast value   | Initial C50 search point            |\n  |    with response closest  |                                     |\n  |    to the empirical max/2)|                                     |\n  | min_c50 (low/2)           | Minimum C50 value (low is the lowest|\n  |                           |    contrast tested                  |\n  | max_c50 (1)               | Maximum value of C50                |\n  | init_N (1)                | Initial value for N                 |\n  | min_N (0.1)               | Minimum value of N                  |\n  | max_N (5)                 | Maximum value of N                  |\n  | init_S (1)                | Initial value for S                 |\n  | min_S (1)                 | Minumum value of S                  |\n  | max_S (2.5)               | Maximum value of S                  |\n  -------------------------------------------------------------------\n\n  Example:\n    c = [0:0.05:1];\n    rmax_in = 10; c50_in = 0.45; N_in = 1.5; s_in = 1;\n    r = rmax_in * vlt.fit.naka_rushton_func(c,c50_in,N_in,s_in);\n    [rmax,c50,N,s] = vlt.neuro.vision.contrast.naka_rushton_fit(c,r);\n    r_fit = rmax * vlt.fit.naka_rushton_func(c,c50,N,s);\n    figure;\n    plot(c,r,'-o');\n    hold on;\n    plot(c,r_fit,'r-x');\n    xlabel('Contrast'); ylabel('Response'); box off;\n</code></pre>"},{"location":"reference/%2Bvis/%2Bcontrast/naka_rushton_func.m/","title":"vis.contrast.naka_rushton_func","text":"<pre><code>  vlt.fit.naka_rushton_func - Evaluate Naka Rushton function\n\n   R=vlt.fit.naka_rushton_func (C, C50, N, S)\n\n   Returns Naka Rushton function:  C.^N./(C.^(N*S)+c50.^(N*S))\n\n   If S is not specified, S is assumed to be 1.\n   If C is negative, the result is negative.\n\n   See Peirce 2007\n</code></pre>"},{"location":"reference/%2Bvis/%2Bcontrast/%2Bindexes/c50interpolated.m/","title":"vis.contrast.indexes.c50interpolated","text":"<pre><code>  C50INTERPOLATED - find the value of C50 through interpolation\n\n  C50I = C50INTERPOLATED(CONTRAST, RESPONSES)\n\n  Given RESPONSES (N-point vector) and the corresponding stimulus\n  CONTRAST values (N-point vector), return the contrast that gives\n  the half maximum value via linear interpolation.\n\n  The units of CONTRAST should be between 0 and 1. If values larger than\n  1 are given, then it is assumed that CONTRAST is being given in units of\n  percent, and CONTRAST is divided by 100. C50I will then be returned in units\n  of percent.\n\n  Note that this interpolated C50 does not equal the C50 of a Naka-Rushton equation.\n\n  Example:\n     c = 0:0.01:1;\n     c50 = 0.2;\n     r = 10*vlt.fit.naka_rushton_func(c, c50);\n     figure;\n     plot(c,r,'-o');\n     xlabel('Contrast'); ylabel('Response'); box off;\n     c50i = vlt.neuro.vision.contrast.indexes.c50interpolated(c,r);\n     hold on;\n     A = axis;\n     plot([c50i c50i],[A(3) A(4)],'k--');\n</code></pre>"},{"location":"reference/%2Bvis/%2Bcontrast/%2Bindexes/contrastfit2c50.m/","title":"vis.contrast.indexes.contrastfit2c50","text":"<pre><code>  CONTRASTFIT2C50- Compute Half maximum\n\n    C50 = vis.contrast.indexes.contrastfit2c50(CONTRAST, RESPONSE)\n\n   Given contrast in 1 percent steps in CONTRAST, this function\n   computes the half maximum value that is defined as:\n\n   value of C such that R(C50) = 0.5 * max(R)\n\n   Units of contrast can be percent or from 0 to 1.\n   responses should be a row vector\n\n   Note that this empirical C50 does not equal the C50 of a Naka-Rushton equation.\n\n   See Heimel et al. 2005 (Journal of Neurophysiology)\n</code></pre>"},{"location":"reference/%2Bvis/%2Bcontrast/%2Bindexes/contrastfit2relativemaximumgain.m/","title":"vis.contrast.indexes.contrastfit2relativemaximumgain","text":"<pre><code>  CONTRASTFIT2RELATIVEMAXIMUMGAIN - Compute relative maximum gain\n\n    [RMG,CVALUE] = vlt.neuro.vision.contrast.indexes.contrastfit2relativemaximumgain(CONTRAST, RESPONSE)\n\n   Given contrast in 1 percent steps in CONTRAST, this function\n   computes the relative maximum gain that is defined as:\n\n   max(dR/dC)\n\n   Units of contrast can be percent or from 0 to 1.  If they are percent\n   these units will be converted to 0-1, so that the units of dC are \n   in fractions.\n\n   CVALUE is the contrast value where the maximum occurs.\n\n   See Heimel et al. 2005 (J Neurophysiology)\n</code></pre>"},{"location":"reference/%2Bvis/%2Bcontrast/%2Bindexes/contrastfit2saturationindex.m/","title":"vis.contrast.indexes.contrastfit2saturationindex","text":"<pre><code>  CONTRASTFIT2SATURATIONINDEX - Compute Saturation Index \n\n    SI = ndi.vis.contrast.contrastfit2saturationindex(CONTRAST, RESPONSE)\n\n   Given contrast in 1 percent steps in CONTRAST, this function\n   computes the \"saturation index\" that is defined as:\n\n   SI = (Rmax - R(100)) / (Rmax - R(0))\n\n   This is the amount of \"super saturation\" at 100% contrast.\n\n   Units of contrast can be percent or from 0 to 1.\n\n   If Rmax == R(0), then the measure is undefined and the index that is\n   returned is NaN.\n\n   This index is called MI in Peirce 2007 (JoV)\n</code></pre>"},{"location":"reference/%2Bvis/%2Bcontrast/%2Bindexes/contrastfit2sensitivity.m/","title":"vis.contrast.indexes.contrastfit2sensitivity","text":"<pre><code>  CONTRASTFIT2SENSITIVITY - Compute contrast sensitivity\n\n   [S,C_CRITERON] = vlt.neuro.vision.contrast.indexes.contrastfit2sensitivity(...\n    NKPARAMETERS, CRITERION)\n\n   Given Naka-Rushton fit parameters (either [Rm C50], [Rm C50 N], or [Rm C50 N S])\n   computes the first contrast C_CRITERION where the response exceeds CRITERION.\n   The sensitivity S = 1/C_CRITERION is also computed.\n\n   If there is no response that exceeds the criterion, then the sensitivity S is 0\n   and the C_CRITERION is Inf.\n\n   Example:\n     c = 0:0.1:1;\n     rm = 10;\n     c50 = 0.3;\n     r = rm*vis.contrast.naka_rushton_func(c,c50);\n     figure;\n     plot(c,r,'b-');\n     xlabel('Contrast'); ylabel('Response'); box off;\n     [s,c_criterion] = vis.contrast.indexes.contrastfit2sensitivity([rm c50],2);\n     hold on\n     A = axis;\n     plot(c_criterion*[1 1],A([3 4]),'k-');\n     title(['Contrast sensitivity is ' num2str(s) '.']);\n</code></pre>"},{"location":"reference/%2Bvis/%2Bcontrast/%2Bindexes/fitindexes.m/","title":"vis.contrast.indexes.fitindexes","text":"<pre><code>  FITINDEXES - compute contrast fit index values from a response structure\n\n  FI = vlt.neuro.vision.contrast.index.fitindexes(RESPSTRUCT, FITTERMS)\n\n   RESPSTRUCT is a structure  of response properties with fields:\n  |------------------------------------------------------------------|\n  | Field     | Description                                          |\n  |------------------------------------------------------------------|\n  | curve     |   4xnumber of contrasts tested,                      |\n  |           |     curve(1,:) is contrasts tested                   |\n  |           |     curve(2,:) is mean response at each contrast     |\n  |           |     curve(3,:) is standard deviation at each contrast|\n  |           |     curve(4,:) is standard error at each contrast    |\n  | ind       |   cell list of individual trial responses for each   |\n  |           |     contrast                                         |\n  | blankresp |   1x3 vector of mean control response, mean control  |\n  |           |     response standard deviation, and mean control    |\n  |           |     response standard error.\n  |------------------------------------------------------------------|\n\n  FITTERMS is the number of terms to include in the Naka-Rushton Fit\n   (R = RM * C.^N/(C.^(N*S)+c50^.(N*S))\n\n  |------------------------------------------------------------------|\n  | FITTERMS  | Description                                          |\n  |------------------------------------------------------------------|\n  |    2      | Uses only RM and C50 (N and S are 1)                 |\n  |    3      | Uses only RM, C50, and N (S is 1)                    |\n  |    4      | Uses RM, C50, N, and S                               |\n  |------------------------------------------------------------------|\n\n  Returns a structure FI with fields:\n\n  |------------------------------------------------------------------|\n  | Field                  | Description                             |\n  |------------------------------------------------------------------|\n  | fit_parameters         | [RM C50 N S]  Naka Rushton fit params   |\n  |                        |   N and S are left off if FITTERMS&lt;3,4  |\n  | fit                    | 2x101 matrix; first row is contrasts    |\n  |                        |   0:0.01:1; second row is fit of        |\n  |                        |   responses for those contrasts         | \n  | r2                     | Fit r^2 value                           |\n  | empirical_C50          | Empirical fit contrast that gives 50% of|\n  |                        |   response to 100% contrast (differs    |\n  |                        |   from C50 of the fit b/c max response  |\n  |                        |   is not usually at 100% contrast)      |\n  | relative_max_gain      | Relative maximum gain (Heimel et al.    |\n  |                        |   2005)                                 |\n  | saturation_index       | Saturation index (only meaningful for   |\n  |                        |   fits including S but provided always) |\n  | sensitivity            | 1x10 vector of contrast sensitivity with|\n  |                        |   criteria of [1 ... 10] standard       |\n  |                        |   deviations of the control response.   |\n  |                        |   If the standard deviation of the      |\n  |                        |   control response is 0, then it is     |\n  |                        |   recalculated assuming the response is |\n  |                        |   1 unit on one trial.                  |\n  |------------------------------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/bandwidth.m/","title":"vis.frequency.bandwidth","text":"<pre><code>  BANDWIDTH - calculate the bandwidth between two frequencies\n\n  BW = BANDWIDTH(LOW, HIGH)\n\n  Calculates bandwidth as log2(HIGH/LOW).\n\n  If LOW is NaN or +/-Inf, BW is Inf;\n  If HIGH is NaN or +/Inf, BW is Inf.\n  Otherwise, BW is log2(HIGH/LOW).\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/compute_halfwidth.m/","title":"vis.frequency.compute_halfwidth","text":"<pre><code>  COMPUTE_HALFWIDTH - find where signal reaches maximum, 1/2 on left side, 1/2 on right side\n\n      [LOW,MAX,HIGH] = COMPUTE_HALFWIDTH( X, Y )\n\n      returns MAX, where x position where function attains its maximum value\n      LOW &lt; MAX,  where function attains half its maximum\n      HIGH &gt; MAX, where function attains half its maximum\n      returns NAN for LOW or/and HIGH, when function does not come below the point\n\n      See also: COMPUTE_HALFWIDTH_INTERP\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/compute_halfwidth_interp.m/","title":"vis.frequency.compute_halfwidth_interp","text":"<pre><code>  COMPUTE_LOWHALFMAX\n      [LOW,MAX,HIGH] = COMPUTE_HALFWIDTH_INTERP( X, Y )\n\n      interpolates function by linearly (splines goes strange for small points)\n      and returns MAX, where x position where function attains its maximum value\n      LOW &lt; MAX,  where function attains half its maximum\n      HIGH &gt; MAX, where function attains half its maximum\n      returns NAN for LOW or/and HIGH, when function does not come below the point\n\n      note: ugly,slow and crude routine,    consider taking log x first\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/dog.m/","title":"vis.frequency.dog","text":"<pre><code>  DOG - difference of gaussians\n\n  Y = DOG(X, P_DOG)\n\n  Given values of X and difference-of-gaussian parameters\n  P_DOG = [ A1 B1 A2 B2]\n\n  returns \n\n  y = A1*exp(-x.^2/(2*B1^2)) - A2*exp(-x.^2/(2*B2^2))\n\n  (By Alexander Heimel)\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/dog_fit.m/","title":"vis.frequency.dog_fit","text":"<pre><code>  DOG_FIT - perform a difference of gaussians fit\n\n  [PARAMS, ERR] = DOG_FIT(X,Y,S, ...)\n\n  Perform a difference of gaussians fit Y_ for the equation\n\n  Y_ = a1*exp(-X.^2/(2*b1^2)) - a2*exp(-X.^2/(2*b2^2))\n\n  X and Y are column vectors with values of the fit. If S is provided,\n  it is expected to be the standard deviation of the measurement and\n  the fit will be weighted by 1/(1+s) for each entry (so more variable\n  points get less weight).\n\n  PARAMS are the parameters [A1 B1 A2 B2] of the DOG fit (see help DOG).\n  ERR is the averaged squared error over all entries of Y, weighted\n  by the weights calculated with S if provided.\n\n  This function takes name/value pairs that influence its behavior\n  |-----------------------------------------------------------------|\n  | Parameter (default)  | Description                              |\n  |----------------------|------------------------------------------|\n  | start_positions (10) | Number of random start positions to use  |\n  |_---------------------|------------------------------------------|\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/movshon2005_cells.m/","title":"vis.frequency.movshon2005_cells","text":"<pre><code>  MOVSHON2005_CELLS - reproduced data from 2 examples cells from Movshon et al\n\n  [CELL1,CELL2] = MOVSHON2005_CELLS()\n\n  Return temporal frequency vs. response rates for 2 example cells\n  from Figure 1a from Movhson et al. 2005 (J Neurosci., V 25).\n\n  Data grabbed with DataThief.\n\n  Example:\n    [cell1,cell2] = vis.frequency.movshon2005_cells();\n    figure;\n    plot(cell1(:,1),cell1(:,2),'ro-');\n    hold on;\n    plot(cell2(:,1),cell2(:,2),'bo-');\n    set(gca,'xscale','log');\n    xlabel('Temporal frequency (Hz)');\n    ylabel('Response (ips)');\n    box off;\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/movshon2005_fit.m/","title":"vis.frequency.movshon2005_fit","text":"<pre><code>  MOVSHON2005_FIT - fit a Movshen et al. 2005 frequency response function\n\n  [P,RFIT,MSE,RSQUARED] = MOVSHON2005_FUNC(F, R, USEC)\n\n  Computes a least squares fit of responses (R) to frequencies (F) according to\n  Movshon et al. 2005, J Neurosci 25:2712-2722.\n\n  F is a vector of frequencies over which to make the calculation.\n  R is a corresponding vector of responses for each value of F.\n  If USEC is present and is 1, then P will also contain the constant.\n  Outpus:\n  P is a vector with the parameters where\n    k - P(1) - scaling factor\n    fc - P(2) - characteristic temporal frequency\n    fh - P(3) - corner frequency of the low-frequency limb\n    B - P(4) - slope of the low-frequency limb\n  MSE - mean squared error (per point)\n  RSQUARED - the RSQUARED value of the fit.\n\n  The function has the form:\n\n     R(f) = k * exp(-(f./fc).^2) ./ (1+(fh./f).^B)\n\n  See MOVSHON2005_FUNC (vis.frequency.movshon2005_func)\n\n  Example:\n    [cell1,cell2] = vis.frequency.movshon2005_cells();\n    [P1,rfit1,mse1,rsq1] = vis.frequency.movshon2005_fit(cell1(:,1),cell1(:,2));\n    [P2,rfit2,mse2,rsq2] = vis.frequency.movshon2005_fit(cell2(:,1),cell2(:,2));\n    freq_points = logspace(log10(0.02),log10(64),50);\n\n    figure;\n       % the data points\n    plot(cell1(:,1),cell1(:,2),'ro'); \n    hold on;\n       % the fit\n    plot(freq_points,vis.frequency.movshon2005_func(freq_points,P1),'r-'); \n       % the second data points\n    plot(cell2(:,1),cell2(:,2),'bo');\n       % the second fit \n    plot(freq_points,vis.frequency.movshon2005_func(freq_points,P2),'b-'); \n    box off;\n    ylabel('Response (ips)');\n    xlabel('Temporal Frequency (Hz)');\n    set(gca,'xscale','log');\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/movshon2005_func.m/","title":"vis.frequency.movshon2005_func","text":"<pre><code>  MOVSHON2005_FUNC - Movshen et al. 2005 frequency response function\n\n  R = MOVSHON2005_FUNC(F, P)\n\n  Computes responses to frequencies according to Movshon et al. 2005,\n  J Neurosci 25:2712-2722.\n\n  F is a set of frequencies over which to make the calculation.\n  P is a vector with the parameters where\n    k - P(1) - scaling factor\n    fc - P(2) - characteristic temporal frequency\n    fh - P(3) - corner frequency of the low-frequency limb\n    B - P(4) - slope of the low-frequency limb\n\n  If P has 5 parameters, then there is a constant term C. Otherwise C is 0.\n    C - P(5)\n\n  The function has the form:\n\n     R(f) = k * exp(-(f./fc).^2) ./ (1+(fh./f).^B) + C\n\n\n  Example:\n    f = logspace(log10(0.01),log10(32),50);\n    k = 10;\n    fc = 5;\n    fh = 12;\n    B = 1;\n    R = vis.frequency.movshon2005_func(f,[k fc fh B]);\n\n    figure;\n    plot(f,R,'ko-');\n    set(gca,'xscale','log');\n    box off;\n    ylabel('Response');\n    xlabel('Frequency');\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/spatial_frequency_analysis.m/","title":"vis.frequency.spatial_frequency_analysis","text":"<pre><code>   SFANALYSIS_COMPUTE  Analyze reponses to spatial frequencies\n  %  [ASSOC]=SFANALYSIS_COMPUTE(RESP)\n\n   Analyzes spatial frequency responses.\n\n   RESP is a structure list of response properties with fields:\n   curve    |    4xnumber of spatial frequencies tested,\n            |      curve(1,:) is spatial frequencies tested\n            |      curve(2,:) is mean responses\n            |      curve(3,:) is standard deviation\n            |      curve(4,:) is standard error\n   ind      |    cell list of individual trial responses for each SF\n   spont    |    spontaneous responses [mean stddev stderr]\n   spontind |    individual spontaneous responses\n   Optionally:\n   blank    |    response to a blank trial: [mean stddev stderr]\n   blankind |    individual responses to blank\n\n\n   If the function is called with no arguments, then the of associate\n   names that are computed by the function is returned.\n\n   Returns data in the form of 'associates' that can be added\n   to a measured data object:\n   'SF Response curve'        |   Response curve (tfs;mean;stddev;stderr)\n   'SF Pref'                  |   SF w/ max response\n   'SF Low'                   |   low SF with half of max response \n   'SF High'                  |   high SF with half of max response\n\n         Same as above with 'blank' or 'spont' rate subtracted\n   'SF Low SF'                |   low SF with half of max response \n   'SF High SF'               |   high SF with half of max response\n\n   Difference of gaussians fit:\n   'SF DOG params'            |   'r0 re se ri si'\n   'SF DOG Fit'               |   1st row has SF values, 2nd has responses\n   'SF DOG R2'                |   R^2 error\n   'SF DOG Low'               |   Low cut-off, as measured with DOG\n   'SF DOG High'              |   High cut-off, as measured with DOG\n   'SF DOG Pref'              |   SF Pref, as measured with DOG\n\n   Cubic spline \"Fit\":\n   'SF spline Fit'            |   1st row has SF values, 2nd has responses\n   'SF spline Pref'           |   SF Pref, as measured with spline\n   'SF spline Low'            |   Low cut-off, as measured with spline\n   'SF spline High'           |   High cut-off, as measured with spline\n\n   Movshon et al 2005 fit: \n   'SF MV params'             |   [k fc fh B]\n   'SF MV Fit'                |   First row has SF values, 2nd has responses\n   'SF MV R2'                 |   R2 error.\n   'SF MV L50'                |   Low cut-off\n   'SF MV Pref'               |   SF Preference\n   'SF MV H50'                |   High cut-off\n</code></pre>"},{"location":"reference/%2Bvis/%2Bfrequency/temporal_frequency_analysis.m/","title":"vis.frequency.temporal_frequency_analysis","text":"<pre><code>   TFANALYSIS_COMPUTE  Analyze reponses to temporal frequencies\n  %  [ASSOC]=TFANALYSIS_COMPUTE(RESP)\n\n   Analyzes temporal frequency responses.\n\n   RESP is a structure list of response properties with fields:\n   curve    |    4xnumber of temporal frequencies tested,\n            |      curve(1,:) is temporal frequencies tested\n            |      curve(2,:) is mean responses\n            |      curve(3,:) is standard deviation\n            |      curve(4,:) is standard error\n   ind      |    cell list of individual trial responses for each TF\n   spont    |    spontaneous responses [mean stddev stderr]\n   spontind |    individual spontaneous responses\n   Optionally:\n   blank    |    response to a blank trial: [mean stddev stderr]\n   blankind |    individual responses to blank\n\n\n   If the function is called with no arguments, then the of associate\n   names that are computed by the function is returned.\n\n   Returns data in the form of 'associates' that can be added\n   to a measured data object:\n   'TF Response curve'        |   Response curve (tfs;mean;stddev;stderr)\n   'TF Pref'                  |   TF w/ max response\n   'TF Low'                   |   low TF with half of max response \n   'TF High'                  |   high TF with half of max response\n\n         Same as above with 'blank' or 'spont' rate subtracted\n   'TF Low TF'                |   low TF with half of max response \n   'TF High TF'               |   high TF with half of max response\n\n   Difference of gaussians fit:\n   'TF DOG params'            |   'r0 re se ri si'\n   'TF DOG Fit'               |   1st row has TF values, 2nd has responses\n   'TF DOG R2'                |   R^2 error\n   'TF DOG Low'               |   Low cut-off, as measured with DOG\n   'TF DOG High'              |   High cut-off, as measured with DOG\n   'TF DOG Pref'              |   TF Pref, as measured with DOG\n\n   Cubic spline \"Fit\":\n   'TF spline Fit'            |   1st row has TF values, 2nd has responses\n   'TF spline Pref'           |   TF Pref, as measured with spline\n   'TF spline Low'            |   Low cut-off, as measured with spline\n   'TF spline High'           |   High cut-off, as measured with spline\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/dirspace2orispace.m/","title":"vis.oridir.dirspace2orispace","text":"<pre><code>  DIRSPACE2ORISPACE - Converts direction responses to orientation responses\n\n   [ANGLES_ORI,RESPONSES_ORI] = vlt.neuro.vision.oridir.dirspace2orispace(ANGLES, RESPONSES)\n\n   Converts direction responses and angles of stimulation into orientation space.\n\n   Each angle in ANGLES that goes around the clock in direction space (ranging\n   from 0 to 360 degrees) is converted to an orientation ranging from 0 to 180\n   degrees and returned in ANGLES_ORI.  The new ANGLES_ORI is a column vector\n   (regardless of the form of the input ANGLES).\n\n   RESPONSES_ORI(A,R) is a matrix of all RESPONSES R that map to the orientation \n   A.  In the event that there are not an equal number of responses to each\n   orientation, extra entries in the matrix will be NaN.\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/doublegaussianfunc.m/","title":"vis.oridir.doublegaussianfunc","text":"<pre><code>  vlt.neuro.vision.oridir.doublegaussianfunc - compute responses for double gaussian fit\n\n  R = DOUBLEGAUSIANFUNC(ANGLES, PARAMETERS)\n\n  Given ANGLES in degrees, and PARAMETERS = [Rsp Rp Rn Op sig]\n\n  compute R = Rsp+Rp*exp(-vlt.math.angdiff(Op-angles).^2/(2*sig^2))+Rn*exp(-vlt.math.angdiff(180+Op-angles).^2/(2*sig^2));\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/dsi2dirparams.m/","title":"vis.oridir.dsi2dirparams","text":"<pre><code>  DSI2DIRPARAMS - Given a DSI, generate double gaussian parameters that has that dsi index\n\n    [RSP,RP,OP,SIGMA,RN] = vlt.neuro.vision.oridir.dsi2dirparams(DSI, ...)\n\n    Given a requested DSI index value, where DSI is defined as \n      (RESPONSE(PREFERRED) - RESPONSE(OPPOSITE))/RESPONSE(PREFERRED)\n    this function generates a set of double gaussian parameters that satisfies\n    the DSI.\n\n    By default, OP is 0, SIGMA is 20, RSP is 0, RP = 10. \n\n    One can add extra arguments as name/value pairs to modify the SIGMA, OP, and\n    RSP parameters of the double gaussian, for example:\n    [RSP,RP,OP,SIGMA,RN] = vlt.neuro.vision.oridir.dsi2dirparams(DSI, 'SIGMA',40)\n\n    One can use the following code to validate this function:\n       desired_index = [];\n       actual_index = [];\n       for i=0:0.1:1,\n           desired_index(end+1) = i;\n           [rsp,rp,op,sigma,rn] = vlt.neuro.vision.oridir.dsi2dirparams(i);\n           [dummy,shape] = vlt.fit.otfit_carandini_err([rsp rp op sigma rn],[0:22.5:360-22.5]);\n           actual_index(end+1) = vlt.neurovision.oridir.index.compute_directionindex(0:22.5:360-22.5,shape);\n        end;\n        [desired_index' actual_index']\n\n    See also: vlt.fit.otfit_carandini\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/osi2oriparams.m/","title":"vis.oridir.osi2oriparams","text":"<pre><code>  OSI2ORIPARAMS - Given an OSI, generate double gaussian parameters that has that osi index\n\n    [RSP,RP,OP,SIGMA,RN] = vlt.neuro.vision.oridir.osi2oriparams(OSI, ...)\n\n    Given a requested OSI index value, where OSI is defined as \n      (RESPONSE(PREFERRED) - RESPONSE(ORTHOGONAL))/RESPONSE(PREFERRED)\n    this function generates a set of double gaussian parameters that satisfies\n    the OSI.\n\n    By default, OP is 0, SIGMA is 20, RP and RN are 10, unless OSI==0, in which case RP and RN are 0 and\n    RSP is 10.\n\n    One can add extra arguments as name/value pairs to modify the SIGMA, OP, and\n    RSP parameters of the double gaussian, for example:\n    [RSP,RP,OP,SIGMA,RN] = vlt.neuro.vision.oridir.osi2oriparams(OSI, 'SIGMA',40)\n\n    One can use the following code to validate this function:\n       desired_index = [];\n       actual_index = [];\n       for i=0:0.1:1,\n           desired_index(end+1) = i;\n           [rsp,rp,op,sigma,rn] = vlt.neuro.vision.oridir.osi2oriparams(i);\n           [dummy,shape] = vlt.fit.otfit_carandini_err([rsp rp op sigma rn],[0:22.5:360-22.5]);\n           actual_index(end+1) = vlt.neurovision.oridir.index.compute_orientationindex(0:22.5:360-22.5,shape);\n        end;\n        [desired_index' actual_index']\n\n    See also: vlt.fit.otfit_carandini\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/osi2oriparams2.m/","title":"vis.oridir.osi2oriparams2","text":"<pre><code>  OSI2ORIPARAMS - Given an OSI, generate double gaussian parameters that has that osi index\n\n    [RSP,RP,OP,SIGMA,RN] = vlt.neuro.vision.oridir.osi2oriparams2(OSI, ...)\n\n    Given a requested OSI index value, where OSI is defined as \n      (RESPONSE(PREFERRED) - RESPONSE(ORTHOGONAL))/RESPONSE(PREFERRED)\n    this function generates a set of double gaussian parameters that satisfies\n    the OSI.\n\n    By default, OP is 0, SIGMA is 20, RP and RN are equal. RP + RSP will be 10.\n    RSP will be set to whatever is necessary to make the OSI be fit.\n\n\n\n    One can add extra arguments as name/value pairs to modify the SIGMA, OP, and\n    RSP parameters of the double gaussian, for example:\n    [RSP,RP,OP,SIGMA,RN] = vlt.neuro.vision.oridir.osi2oriparams2(OSI, 'SIGMA',40)\n\n    One can use the following code to validate this function:\n       desired_index = [];\n       actual_index = [];\n       for i=0:0.1:1,\n           desired_index(end+1) = i;\n           [rsp,rp,op,sigma,rn] = vlt.neuro.vision.oridir.osi2oriparams2(i);\n           [dummy,shape] = vlt.fit.otfit_carandini_err([rsp rp op sigma rn],[0:22.5:360-22.5]);\n           actual_index(end+1) = vlt.neurovision.oridir.index.compute_orientationindex(0:22.5:360-22.5,shape);\n        end;\n        [desired_index' actual_index']\n\n    See also: vlt.fit.otfit_carandini\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/rotated_oripref_stats.m/","title":"vis.oridir.rotated_oripref_stats","text":"<pre><code>  ROTATED_ORIPREF_STATS - compute mean and dispersion of a set of orientation angle preferences with respect to a reference angle\n\n  [MEANANGLE,DISPERSION] = vlt.neuro.vision.oridir.rotated_oripref_stats(ORI_PREF, REFERENCE_ANGLE)\n\n  Given a vector of ORI_PREF values (can be in 0..360 but will be converted to 0..180 with MOD)\n  and a REFERENCE_ANGLE that defines '0' (can be in 0..360 but will be converted to 0..180 with MOD)\n  returns the mean angle MEANANGLE and the DISPERSION, calculated as the circular variance (CIRC_VAR).\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/rotatedircurve.m/","title":"vis.oridir.rotatedircurve","text":"<pre><code>  ROTATEDIRCURVE - rotate a direction curve so that it's highest value is at a defined place\n\n   NEWCURVE = vlt.neuro.vision.oridir.rotatedircurve(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT)\n\n   Rotates the direction tuning curve measured at angles ANGLES and \n   with responses RESPONSES so that the maximum response is at PREF_ANGLE_ASSIGNMENT.\n\n   ANGLES are assumed to run from 0 .. 360.\n\n   NEWCURVE is the shifted response curve that can be plotted with the existing\n   ANGLES measurements.\n\n   The function also has a form:\n\n   NEWCURVE = vlt.neuro.vision.oridir.rotatedircurve(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT, ANCHOR_RESPONSES)\n\n   That will shift the curve RESPONSES based on the responses of a different curve\n   ANCHOR_RESPONSES. This is useful, for example, for shifting the surround tuning\n   curve with respect to the responses of a center tuning curve, for example.\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/vector_direction_pref.m/","title":"vis.oridir.vector_direction_pref","text":"<pre><code>  VECTOR_DIRECTION_PREF - Determine dir preference/response w/ vector methods\n\n   [PREF_RESP, NULL_RESP, DIR_PREF, ORI_PREF] = ...\n        vlt.neuro.vision.oridir.vector_direction_pref(ANGLES, RESPONSES, [BLANK])\n\n   Calculates the preferred response PREF_RESP and the null response\n   NULL_RESP with vector methods.\n\n   First, the orientation preference is calculated using vector methods.\n   Then, the preferred and null responses are computed at the 2 directions\n   that correspond to the orientation angle indicated by the vector method.\n   The responses are computed by interpolation.\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bfit/doublegaussian.m/","title":"vis.oridir.fit.doublegaussian","text":"<pre><code>  DOUBLEGAUSSIAN - perform a double gaussian fit for stimulus direction\n\n   [P, FITCURVE, MSSE, R2] = DOUBLEGAUSSIAN(ANGLES, RESPONSES)\n\n  Given ANGLES and RESPONSES, produce a least-squares fit to the function\n\n  R=Rsp+Rp*EXP(-(ANGLES-Op)^2)/(2*sigm^2))+Rn*EXP(-(ANGLES-Op+180)^2/(2*sigm^2))\n\n  ANGLES should be in degrees.\n\n  where \n    Rsp = P(1)\n    Rp = P(2)\n    Op = P(3)\n    sigm = P(4)\n    Rn = P(5)\n\n  Rsp is constrained to be within -span and + span, where span is max(responses)-min(responses).\n  Rp is constrained to be between 0 and 3 times the peak response.\n  Rn is constrained to be between 0 and Rp\n  Op is between 0 and 2*pi, excluding 2*pi\n  sigm must be larger than the median difference between angles divided by 2 and 90.\n\n  Example:\n     angles = 0:30:360-30;\n     P = [ -0.5 20 10 55 39];\n     responses = vlt.neuro.vision.oridir.doublegaussianfunc(angles,P);\n     [P_fit,fitcurve,msse,R2] = vis.oridir.fit.doublegaussian(angles,responses);\n     figure;\n     plot(angles,responses,'o');\n     hold on\n     plot(fitcurve(1,:),fitcurve(2,:),'b-');\n     box off;\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_circularvariance.m/","title":"vis.oridir.index.compute_circularvariance","text":"<pre><code>  vlt.neuro.vision.oridir.index.compute_circularvariance\n      CV = vlt.neuro.vision.oridir.index.compute_circularvariance( ANGLES, RATES )\n\n      Takes ANGLES in degrees.  ANGLES and RATES should be\n      row vectors.\n\n  CV = 1 - |R|\n  R = (RATES * EXP(2I*ANGLES)') / SUM(RATES)\n\n  See Ringach et al. J.Neurosci. 2002 22:5639-5651\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_dircircularvariance.m/","title":"vis.oridir.index.compute_dircircularvariance","text":"<pre><code>  vlt.neuro.vision.oridir.index.compute_dircircularvariance\n      CV = vlt.neuro.vision.oridir.index.compute_dircircularvariance( ANGLES, RATES )\n\n      Takes ANGLES in degrees. ANGLES and RATES should be\n      row vectors.\n\n  CV = 1 - |R|\n  R = (RATES * EXP(I*ANGLES)') / SUM(RATES)\n\n  See Ringach et al. J.Neurosci. 2002 22:5639-5651\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_directionindex.m/","title":"vis.oridir.index.compute_directionindex","text":"<pre><code>  vlt.neuro.vision.oridir.index.compute_directionindex\n      DI = vlt.neuro.vision.oridir.index.compute_directionindex( ANGLES, RATES )\n\n      Takes ANGLES in degrees\n\n      di = (maxrate - rate(stimulus in oppositedirection))/maxrate\n             di == 1 means maximally selective\n             di == 0 means not selective\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_directionsignificancedotproduct.m/","title":"vis.oridir.index.compute_directionsignificancedotproduct","text":"<pre><code>  COMPUTE_DIRECTIONSIGNIFICANCEDOTPRODUCT Direction tuning significance using dot product with empirical orientation preference\n\n\n   P = COMPUTE_DIRECTIONSIGNIFIANCEDOTPRODUCT(ANGLES, RATES)\n\n   This function calculates the probability that the \"true\" direction tuning\n   vector of a neuron has non-zero length. It performs this by empirically\n   determing the unit orientation vector, and then computing the dot\n   product of the direction vector for each trial onto the overall orientation\n   vector, and then looking to see if the average is non-zero.\n\n   Inputs:  ANGLES is a vector of direction angles at which the response has\n            been measured. \n            RATES is the response of the neuron in to each angle; each row\n            should contain responses from a different trial.\n   Output:  P the probability that the \"true\" direction tuning vector is\n            non-zero.\n\n   See: Mazurek, Kagan, Van Hooser 2014;  Frontiers in Neural Circuits\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_dirvecconstrainedori.m/","title":"vis.oridir.index.compute_dirvecconstrainedori","text":"<pre><code>  COMPUTE_DIRVECCONSTRAINEDORI - Computes direction vector constrained by orientation (DVCO)\n\n    [DI,PREF,DV] = COMPUTE_DIRVECCONSTRANEDORI(ANGLES, RATES)\n\n    ANGLES and RATES should be ROW vectors.\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_dirvecdotorivec.m/","title":"vis.oridir.index.compute_dirvecdotorivec","text":"<pre><code>  COMPUTE_DIRVECDOTORIVEC - Direction index based on dot product with computed orientation vector\n\n      DI = vlt.neuro.vision.oridir.index.compute_dirvecdotorivec( ANGLES, RATES )\n\n      Takes ANGLES in degrees, and RATES is the response to each angle\n      in a row vector.\n\n      DI is a modified vector index; the function first finds the empirical\n      orientation vector and then computes dot product of direction vector with \n      unit orentation vector\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_halfwidth.m/","title":"vis.oridir.index.compute_halfwidth","text":"<pre><code>  COMPUTE_LOWHALFMAX\n      [LOW,MAX,HIGH] = vlt.neuro.vision.oridir.index.compute_halfwidth( X, Y )\n\n      interpolates function by linearly (splines goes strange for small points)\n      and returns MAX, where x position where function attains its maximum value\n      LOW &lt; MAX,  where function attains half its maximum\n      HIGH &gt; MAX, where function attains half its maximum\n      returns NAN for LOW or/and HIGH, when function does not come below the point\n\n      note: ugly,slow and crude routine,    consider taking log x first\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_orientationindex.m/","title":"vis.oridir.index.compute_orientationindex","text":"<pre><code>  vlt.neuro.vision.oridir.index.compute_orientationindex\n      DI = vlt.neuro.vision.oridir.index.compute_orientationindex( ANGLES, RATES )\n\n      Takes ANGLES in degrees\n\n      oi = (max + max_180 - max_90 - max_270)/(max)\n\n      no interpolation done\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_orientationvector.m/","title":"vis.oridir.index.compute_orientationvector","text":"<pre><code>  vlt.neuro.vision.oridir.index.compute_orientationvector\n      VECTOR = vlt.neuro.vision.oridir.index.compute_orientationvector( ANGLES, RATES )\n\n      Takes ANGLES in degrees and returns the orientation vector:\n\n      vector = (rates*transpose(exp(sqrt(-1)*2*mod(angles*pi/180,pi))))/N\n\n      The vector is normalized by a factor of N, which is 2 if the angles\n      go all the way around the clock (that is, they sample from 0 to 360)\n      as opposed to from 0 to 180 (N = 1).\n\n      no interpolation done\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/compute_tuningwidth.m/","title":"vis.oridir.index.compute_tuningwidth","text":"<pre><code>  vlt.neuro.vision.oridir.index.compute_tuningwidth\n      TUNINGWIDTH = vlt.neuro.vision.oridir.index.compute_tuningwidth( ANGLES, RATES )\n\n      Takes ANGLES in degrees\n\n      linearly interpolates rates\n      and returns the half of the distance\n      between the two points sandwiching the maximum\n      where the response is 1/sqrt(2) of the maximum rate.\n      returns 90, when function does not come below the point\n\n  See Rinach et al. J.Neurosci. 2002 22:5639-5651\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2fitdi.m/","title":"vis.oridir.index.fit2fitdi","text":"<pre><code>  FIT2FITDI - direction selectivity index (DSI) from double gaussian fit of direction tuning curve\n\n   DIIND = vlt.neuro.vision.oridir.index.fit2fitdi(R)\n\n     Calculates the direction selectivity index (DSI) from a double gaussian fit\n     of a direction tuning curve.\n     The DSI is defined as DSI = (Rpref - Rnull) / Rpref\n     where Rpref is the response to the preferred direction and Rnull is the response\n     to the direction opposite to the preferred direction (that is, the null direction).\n\n     R is a 2-row vector. The first row is the directions that were evaluated by the\n     fit (e.g., [0:359] is the most common for 1 degree steps between 0 and 359), and\n     the second row is the response of the fit for each angle.\n\n     See also: vlt.fit.otfit_carandini, vlt.neuro.vision.oridir.index.fit2fitoi, vlt.neuro.vision.oridir.index.fit2fitdibr\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2fitdibr.m/","title":"vis.oridir.index.fit2fitdibr","text":"<pre><code>  vlt.neuro.vision.oridir.index.fit2fitdibr - Direction index from double gaussian fit (blank rectified) \n\n   DSI = vlt.neuro.vision.oridir.index.fit2fitdibr(FITPARAMS, BLANKRESP)\n\n   Computes the \"direction selectivity index\", or the fraction of the total response\n   that is in the preferred direction compared to the opposite direction.\n\n   FITPARAMS is a 5-value vector describing a double gaussian fit to a\n   direction tuning curve (FITPARAMS(1) is offset, FITPARAMS(2) is weight\n   of first gaussian peak, FITPARAMS(3) is the peak tuning position,\n   FITPARAMS(4) is the variance around the peak, FITPARAMS(%) is the\n   weight of the 'null' direction peak):\n   Resp = -BLANK + fitparams(1)+...\n     fitparams(2)*exp(-vlt.math.angdiff(fitparams(3)-angs).^2/(2*fitparams(4)^2)) +...\n     fitparams(5)*exp(-vlt.math.angdiff(fitparams(3)+180-angs).^2/(2*fitparams(4)^2));\n\n   The DSI is defined as DSI = (Rpref - Rnull) / Rpref\n\n   See also: vlt.fit.otfit_carandini, vlt.neuro.vision.oridir.index.fit2fitoi, vlt.neuro.vision.oridir.index.fit2fitdibr\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2fitdibr_orig.m/","title":"vis.oridir.index.fit2fitdibr_orig","text":"<pre><code>vis.oridir.index.fit2fitdibr_orig is a function.\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2fitdidiffsum.m/","title":"vis.oridir.index.fit2fitdidiffsum","text":"<pre><code>  FIT2FITDIDIFFSUM - direction selectivity index (DSI) from double gaussian fit of direction tuning curve\n\n   DIIND = vlt.neuro.vision.oridir.index.fit2fitdidiffsum(R)\n\n     Calculates the direction selectivity index (DSI) from a double gaussian fit\n     of a direction tuning curve.\n     The DSI is defined as DSI = (Rpref - Rnull) / (Rpref + Rnull)\n     where Rpref is the response to the preferred direction and Rnull is the response\n     to the direction opposite to the preferred direction (that is, the null direction).\n\n     R is a 2-row vector. The first row is the directions that were evaluated by the\n     fit (e.g., [0:359] is the most common for 1 degree steps between 0 and 359), and\n     the second row is the response of the fit for each angle.\n\n     See also: vlt.fit.otfit_carandini, vlt.neuro.vision.oridir.index.fit2fitoi, vlt.neuro.vision.oridir.index.fit2fitdibr, vlt.neuro.vision.oridir.index.fit2fitdi\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2fitdr_angle.m/","title":"vis.oridir.index.fit2fitdr_angle","text":"<pre><code>  vlt.neuro.vision.oridir.index.fit2fitdr_angle - Direction ratio (fraction of response in certain direction) from double gaussian fit\n\n   TDR = vlt.neuro.vision.oridir.index.fit2fitdr_angle(FITPARAMS, BLANKRESP, THEANGLE)\n\n   Computes the \"direction ratio\", or the fraction of the total response\n   that is in the given angle compared to the opposite angle.\n\n   FITPARAMS is a 5-value vector describing a double gaussian fit to a\n   direction tuning curve (FITPARAMS(1) is offset, FITPARAMS(2) is weight\n   of first gaussian peak, FITPARAMS(3) is the peak tuning position, \n   FITPARAMS(4) is the variance around the peak, FITPARAMS(%) is the\n   weight of the 'null' direction peak):\n   Resp = -BLANK + fitparams(1)+...\n     fitparams(2)*exp(-vlt.math.angdiff(fitparams(3)-angs).^2/(2*fitparams(4)^2)) +...\n     fitparams(5)*exp(-vlt.math.angdiff(fitparams(3)+180-angs).^2/(2*fitparams(4)^2));\n\n   The formula is TDR = Resp(THEANGLE)/ \n                         (Resp(THEANGLE)+Resp(THEANGLE+180))\n\n   See also: vlt.fit.otfit_carandini, vlt.neuro.vision.oridir.index.fit2fitoi, vlt.neuro.vision.oridir.index.fit2fitdibr\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2fitoi.m/","title":"vis.oridir.index.fit2fitoi","text":"<pre><code>  FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve\n\n   OIIND = vlt.neuro.vision.oridir.index.fit2fitoi(R)\n\n     Calculates the orientation selectivity index (OSI) from a double gaussian fit\n     of a direction tuning curve.\n     The OSI is defined as OSI = (Rpref - Rorth) / Rpref\n     where Rpref is the average response to the preferred direction and the opposite\n     direction (that is, the preferred orientations), and Rorth is the average\n     response to the 2 directions orthogonal to the preferred direction (that is, the\n     orthogonal orientation..\n\n     R is a 2-row vector. The first row is the directions that were evaluated by the\n     fit (e.g., [0:359] is the most common for 1 degree steps between 0 and 359), and\n     the second row is the response of the fit for each angle.\n\n     See also: vlt.fit.otfit_carandini, vlt.neuro.vision.oridir.index.fit2fitoi, vlt.neuro.vision.oridir.index.fit2fitdibr\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2fitoidiffsum.m/","title":"vis.oridir.index.fit2fitoidiffsum","text":"<pre><code>  FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve\n\n   OIIND = vlt.neuro.vision.oridir.index.fit2fitoidiffsum(R)\n\n     Calculates the orientation selectivity index (OSI) from a double gaussian fit\n     of a direction tuning curve.\n     The OSI is defined as OSI = (Rpref - Rorth) / (Rpref + Rorth)\n     where Rpref is the average response to the preferred direction and the opposite\n     direction (that is, the preferred orientations), and Rorth is the average\n     response to the 2 directions orthogonal to the preferred direction (that is, the\n     orthogonal orientation..\n\n     R is a 2-row vector. The first row is the directions that were evaluated by the\n     fit (e.g., [0:359] is the most common for 1 degree steps between 0 and 359), and\n     the second row is the response of the fit for each angle.\n\n     See also: vlt.fit.otfit_carandini, vlt.neuro.vision.oridir.index.fit2fitoi, vlt.neuro.vision.oridir.index.fit2fitdibr, vlt.neuro.vision.oridir.index.fit2fitdidiffsum\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2null.m/","title":"vis.oridir.index.fit2null","text":"<pre><code>  FIT2NULL - calculate the null (anti-preferred) response from a fit to direction\n\n   NULL=vlt.neuro.vision.oridir.index.fit2null(RESPONSE)\n\n   Given the RESPONSE of a double gaussian fit, return the response 180 degrees\n   away from the location with the maximum response.  This is the null\n   response or the response in the anti-preferred direction.\n\n   RESPONSE is a 360x2 vector of responses. The first row indicates the \n   angles of the fit, and the second row indicates the responses.\n\n   For backwards compatibility, if RESPONSE is a 360x1 vector, a new first\n   row is added equal to 0:359.\n\n   See also: vlt.neuro.vision.oridir.index.fit2pref, vlt.neuro.vision.oridir.index.fit2orth\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2orth.m/","title":"vis.oridir.index.fit2orth","text":"<pre><code>  FIT2ORTH - calculate the orthogonal response from a fit to direction\n\n   ORTH=vlt.neuro.vision.oridir.index.fit2orth(RESPONSE)\n\n   Given the RESPONSE of a double gaussian fit, return the response 90 degrees\n   away from the location with the maximum response.  This is the\n   orthogonal response or the response of the neuron to the orientation orthogonal\n   to the preferred.\n\n   RESPONSE is a 360x2 vector of responses. The first row indicates the \n   angles of the fit, and the second row indicates the responses.\n\n   For backwards compatibility, if RESPONSE is a 360x1 vector, a new first\n   row is added equal to 0:359.\n\n   See also: vlt.neuro.vision.oridir.index.fit2pref, vlt.neuro.vision.oridir.index.fit2null\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/fit2pref.m/","title":"vis.oridir.index.fit2pref","text":"<pre><code>  FIT2PREF - calculate the preferred response from a fit to direction\n\n   PREF=vlt.neuro.vision.oridir.index.fit2pref(RESPONSE)\n\n   Given the RESPONSE of a double gaussian fit, find the maximum response.  \n\n   RESPONSE is a 360x2 vector of responses. The first row indicates the \n   angles of the fit, and the second row indicates the responses.\n\n   For backwards compatibility, if RESPONSE is a 360x1 vector, a new first\n   row is added equal to 0:359.\n\n   The largest response is returned in PREF.\n\n   See also: vlt.neuro.vision.oridir.index.fit2null, vlt.neuro.vision.oridir.index.fit2orth\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/oridir_fitindexes.m/","title":"vis.oridir.index.oridir_fitindexes","text":"<pre><code>  ORIDIR_FITINDEXES - compute orientation/direction fits, index values\n\n  FI = vlt.neuro.vision.oridir.index.oridir_fitindexes(RESPSTRUCT)\n\n  Computes orientation/direction index fit values from a response structure RESPSTRUCT.\n\n   RESPSTRUCT is a structure  of response properties with fields:\n   Field    | Description\n   -----------------------------------------------------------------------------\n   curve    |    4xnumber of directions tested,\n            |      curve(1,:) is directions tested (degrees, compass coords.)\n            |      curve(2,:) is mean responses\n            |      curve(3,:) is standard deviation\n            |      curve(4,:) is standard error\n   ind      |    cell list of individual trial responses for each direction\n\n\n  Note that fits may be garbage if there are not significantly different responses across different directions.\n\n  Returns a structure FI with fields:\n  Field                           | Description\n  ----------------------------------------------------------------------------------------\n  fit_parameters                  |   [Rsp Rp Ot sigm Rn]\n  fit                             |   2 row fit; first row is set of directions, second row is responses\n  ot_index                        |   Orientation index ( (pref-orth)/pref) )\n  ot_index_rectified              |   Orientation index ( (pref-orth)/pref) ) rectified to be in 0, 1\n  ot_index_diffsum                |   Orientation index ( (pref-orth)/(pref+orth) )\n  ot_index_diffsum_rectified      |   Orientation index ( (pref-orth)/(pref+orth) ), rectified to be in 0,1\n  dir_pref                        |   Ot\n  tuning_width                    |   Fit tuning width (HWHH, sigm*sqrt(log(4)))\n  dir_index                       |   Direction index ( (pref-orth)/pref) )\n  dir_index_rectified             |   Direction index ( (pref-orth)/pref) ) rectified to be in 0, 1\n  dir_index_diffsum               |   Direction index ( (pref-orth)/(pref+orth) )\n  dir_index_diffsum_rectified     |   Direction index ( (pref-orth)/(pref+orth) ), rectified to be in 0,1\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/oridir_fitindexes_classic.m/","title":"vis.oridir.index.oridir_fitindexes_classic","text":"<pre><code>  ORIDIR_FITINDEXES - compute orientation/direction fits, index values\n\n  FI = vlt.neuro.vision.oridir.index.oridir_fitindexes(RESPSTRUCT)\n\n  Computes orientation/direction index fit values from a response structure RESPSTRUCT.\n\n   RESPSTRUCT is a structure  of response properties with fields:\n   Field    | Description\n   -----------------------------------------------------------------------------\n   curve    |    4xnumber of directions tested,\n            |      curve(1,:) is directions tested (degrees, compass coords.)\n            |      curve(2,:) is mean responses\n            |      curve(3,:) is standard deviation\n            |      curve(4,:) is standard error\n   ind      |    cell list of individual trial responses for each direction\n\n\n  Note that fits may be garbage if there are not significantly different responses across different directions.\n\n  Returns a structure FI with fields:\n  Field                           | Description\n  ----------------------------------------------------------------------------------------\n  fit_parameters                  |   [Rsp Rp Ot sigm Rn]\n  fit                             |   2 row fit; first row is set of directions, second row is responses\n  ot_index                        |   Orientation index ( (pref-orth)/pref) )\n  ot_index_rectified              |   Orientation index ( (pref-orth)/pref) ) rectified to be in 0, 1\n  ot_index_diffsum                |   Orientation index ( (pref-orth)/(pref+orth) )\n  ot_index_diffsum_rectified      |   Orientation index ( (pref-orth)/(pref+orth) ), rectified to be in 0,1\n  dir_pref                        |   Ot\n  tuning_width                    |   Fit tuning width (HWHH, sigm*sqrt(log(4)))\n  dir_index                       |   Direction index ( (pref-orth)/pref) )\n  dir_index_rectified             |   Direction index ( (pref-orth)/pref) ) rectified to be in 0, 1\n  dir_index_diffsum               |   Direction index ( (pref-orth)/(pref+orth) )\n  dir_index_diffsum_rectified     |   Direction index ( (pref-orth)/(pref+orth) ), rectified to be in 0,1\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bindex/oridir_vectorindexes.m/","title":"vis.oridir.index.oridir_vectorindexes","text":"<pre><code>  ORIDIR_VECTORINDEX - compute orientation/direction vector indexes\n\n  VI = vlt.neuro.vision.oridir.index.oridir_vectorindexes(RESPSTRUCT)\n\n  Computes orientation/direction index vector values from a response structure RESP.\n\n   RESPSTRUCT is a structure  of response properties with fields:\n   Field    | Description\n   -----------------------------------------------------------------------------\n   curve    |    4xnumber of directions tested,\n            |      curve(1,:) is directions tested (degrees, compass coords.)\n            |      curve(2,:) is mean responses\n            |      curve(3,:) is standard deviation\n            |      curve(4,:) is standard error\n   ind      |    cell list of individual trial responses for each direction\n\n\n  Returns a structure VI with fields:\n  Field                           | Description\n  ----------------------------------------------------------------------------------------\n  ot_HotellingT2_p                |   Hotelling's T^2 test of orientation vector data\n  ot_pref                         |   Angle preference in orientation space\n  ot_circularvariance             |   Magnitude of response in orientation space (see Ringach et al. 2002)\n  ot_index                        |   Orientation index ( (pref-orth)/pref) )\n  tuning_width                    |   Vector tuning width (see help vlt.neuro.vision.oridir.index.compute_tuningwidth)\n  dir_HotellingT2_p               |   Hotelling's T^2 test of direction vector data\n  dir_pref                        |   Angle preference in direction space\n  dir_circularvariance            |   Direction index in vector space\n  dir_dotproduct_sig_p            |   P value of dot product direction vector significance\n                                  |     method of Mazurek et al. 2014\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bplot/polarplot_dir.m/","title":"vis.oridir.plot.polarplot_dir","text":"<pre><code>  POLARPLOT_DIR - Produces a polar plot of direction responses\n\n   [H,OUTPUTS]=vlt.neuro.vision.oridir.plot.polarplot_dir(ANGLES, RESPONSES, ...)\n\n   Produces a polar plot (using the third party library MMPOLAR)\n   of direction responses in direction space. The plot handle is\n   returned in H.  ANGLES should be direction angles in degrees,\n   and RESPONSES are the responses in appropriate units. \n\n   OUTPUTS is a structure with the following fields:\n   'meanvector'              :  mean direction vector in the complex plane\n   'vectormag'               :  mean direction vector magnitude\n   'vectorpref'              :  vector direction preference in degrees\n   'dircircularvariance'     :  direction circular variance\n   'h_meanvector'            :  plot handle to the mean vector\n   'h_circularvariance'      :  plot handle to the dir circular variance vector\n\n   Additional name/value pairs can be provided as additional arguments:\n   'showmeanvector'          : 0/1 show mean direction vector (default 0)\n   'showdircircularvariance' : 0/1 show dir circular variance vector (default 0)\n                             :    (plots vector with length equal to 1-dircircular\n                             :     variance and angle equal to vector direction \n                             :     preference)\n   'style'                   : 'compass' or 'cartesian', default 'compass'\n\n   See also: vlt.neuro.vision.oridir.dirspace2orispace, MMPOLAR, vlt.neuro.vision.oridir.plot.polarplot_ori\n</code></pre>"},{"location":"reference/%2Bvis/%2Boridir/%2Bplot/polarplot_ori.m/","title":"vis.oridir.plot.polarplot_ori","text":"<pre><code>  POLARPLOT_ORI - Produces a polar plot of orientation responses\n\n   [H,OUTPUTS]=vlt.neuro.vision.oridir.plot.polarplot_ori(ANGLES, RESPONSES, ...)\n\n   Produces a polar plot (using the third party library MMPOLAR)\n   of orientation responses in orientation space. The plot handle is\n   returned in H.  ANGLES should be orientation angles in degrees,\n   and RESPONSES are the responses in appropriate units. \n\n   OUTPUTS is a structure with the following fields:\n      'meanvector'        :  mean orientation vector in the complex plane\n      'vectormag'         :  mean vector magnitude\n      'vectorpref'        :  vector preference in degrees\n      'circularvariance'  :  circular variance\n      'h_meanvector'      :  plot handle to the mean vector\n      'h_circularvariance':  plot handle to the circular variance vector\n\n   Additional name/value pairs can be provided as additional arguments:\n   'showmeanvector'          : 0/1 show mean orientation vector (default 0)\n   'showcircularvariance'    : 0/1 show circular variance vector (default 0)\n                             :    (plots vector with length equal to 1-circular\n                             :     variance and angle equal to orientation\n                             :     preference)\n   'style'                   : 'compass' or 'cartesian', default 'compass'\n\n   See also: vlt.neuro.vision.oridir.dirspace2orispace, MMPOLAR, vlt.neuro.vision.oridir.plot.polarplot_dir\n</code></pre>"},{"location":"reference/%2Bvis/%2Bspeed/fit.m/","title":"vis.speed.fit","text":"<pre><code>  FIT Fit two-dimensional Gaussian function to data set\n\n   [P,SSE] = FIT(SF,TF,R, min_xi)\n\n   Fit a Gaussian to a set of responses generated by a speed tuning curve.\n   SSE is the sum of squared errors between the fit and the data.\n\n   Inputs:\n     SF is an array of spatial frequency values\n     TF is an array of temporal frequency values\n     R is an array of measured responses driven by the spatial and\n     temporal frequency values\n     MIN_XI: if provided, provides the lower limit on XI. If not provided,\n     assumed to be 0. (Might provide -1, for example.)\n\n   Outputs:\n     P is an array with parameters:\n     ---------------------------------------------\n     | A         | Peak response of the neuron   |\n     |           |                               |\n     | zeta      | Skew of the temporal          |\n     |           | frequency tuning curve        |\n     |           |                               |\n     | xi        | Speed parameter               |\n     |           |                               |\n     | sigma_sf  | Tuning width of the neuron    |\n     |           | for spatial frequency         |\n     |           |                               |\n     | sigma_tf  | Tuning width of the neuron    |\n     |           | for temporal frequency        |\n     |           |                               |\n     | sf0       | Preferred spatial frequency   |\n     |           | averaged across temporal      |\n     |           | frequencies                   |\n     |           |                               |\n     | tf0       | Preferred temporal frequency  |\n     |           | averaged across spatial       |\n     |           | frequencies                   |\n     ---------------------------------------------\n\n   See: Priebe et al. 2006\n\n   By Noah Lasky-Nielson\n</code></pre>"},{"location":"reference/%2Bvis/%2Bspeed/fit_nospeed.m/","title":"vis.speed.fit_nospeed","text":"<pre><code>  SPEED.FIT.FIT_NOSPEED  Fit a two-dimensional Gaussian function without a\n  speed parameter to data set.\n\n   [PARAMETERS,ERROR] = SPEED.FIT.FIT_NOSPEED(SF,TF,R)\n\n   Fits a Gaussian to a set of responses generated by a tuning curve\n   without a speed parameter.\n\n   Inputs:\n     SF is an array of spatial frequency values.\n\n     TF is an array of temporal frequency values.\n\n     R is an array of measured responses driven by the spatial and\n     temporal frequency values.\n\n   Outputs:\n     PARAMETERS is an array with parameters:\n     |-----------|-------------------------------|\n     | Parameter | Description                   |\n     |-----------|-------------------------------|\n     | A         | Peak response of the neuron   |\n     |...........|...............................|\n     | zeta      | Skew of the temporal          |\n     |           | frequency tuning curve        |\n     |...........|...............................|\n     | xi        | Speed parameter (set to 0)    |\n     |...........|...............................|\n     | sigma_sf  | Tuning width of the neuron    |\n     |           | for spatial frequency         |\n     |...........|...............................|\n     | sigma_tf  | Tuning width of the neuron    |\n     |           | for temporal frequency        |\n     |...........|...............................|\n     | sf0       | Preferred spatial frequency   |\n     |           | averaged across temporal      |\n     |           | frequencies                   |\n     |...........|...............................|\n     | tf0       | Preferred temporal frequency  |\n     |           | averaged across spatial       |\n     |           | frequencies                   |\n     |-----------|-------------------------------|\n\n     ERROR is the value of the squared 2-norm of the residual of the\n     model.\n\n   See also SPEED.FIT.COMPUTE.TUNINGFUNC, LSQCURVEFIT.\n</code></pre>"},{"location":"reference/%2Bvis/%2Bspeed/plottuning.m/","title":"vis.speed.plottuning","text":"<pre><code>  PLOTTUNING - Plot speed tuning\n\n   PLOTTUNING(SF,TF,R,...)\n\n   Creates a plot like Priebe et al. 2006.\n\n   On the left side, plot the speed tuning for each spatial frequency.\n   On the right side, plot a \"heat map\" of response as a function of\n   spatial frequency.\n\n   This function also takes name/value pairs that modify its\n   default behavior:\n   |----------------------------------------------------------------|\n   |Parameter (default)     | Description                           |\n   |------------------------|---------------------------------------|\n   |'marker' ('o')          | Marker type to use in plot            |\n   |'linestyle' ('none')    | Line style to use                     |\n   |'do_surf' (1)           | 0/1 Should we do the surface plot?    |\n   |------------------------|---------------------------------------|\n\n   Example:\n     out = vis.speed.test.responseplay();\n     figure;\n     vis.speed.plottuning(out.SF,out.TF,out.R,'marker','d','linestyle','-');\n</code></pre>"},{"location":"reference/%2Bvis/%2Bspeed/speed_nested_f.m/","title":"vis.speed.speed_nested_f","text":"<pre><code>  SPEED.FIT.SPEED_NESTED_F  Perform F-test on models varying in parameters.\n\n   P = SPEED.FIT.SPEED_NESTED_F(RESPONSE_VECTOR_LENGTH,ERROR_WITHSPEED,ERROR_NOSPEED)\n\n   Performs an F-test between two models with and without a speed parameter\n   to determine whether a neuron exhibits significant speed tuning.\n\n   Inputs:\n     RESPONSE_VECTOR_LENGTH is the value of the lenght of the vector of measured responses driven by the spatial and\n     temporal frequency values.\n\n     ERROR_WITHSPEED is the value of the squared 2-norm of the residual\n     of the model with a speed parameter.\n\n     ERROR_NOSPEED is the value of the squared 2-norm of the residual\n     of the model without a speed parameter.\n\n   Outputs:\n     P is the p-value returned by the F-test performed between the two\n     models.\n\n   See also  VIS.SPEED.FIT, VIS.SPEED.FIT_NOSPEED.\n</code></pre>"},{"location":"reference/%2Bvis/%2Bspeed/tuningfunc.m/","title":"vis.speed.tuningfunc","text":"<pre><code>  TUNINGFUNC - produce responses given a speed tuning function\n\n   R = TUNINGFUNC(SF,TF,P)\n\n   Produce the responses at given spatial (SF) and temporal (TF) frequencies\n   given parameters for a speed tuning curve. \n\n   Inputs:\n     SF is an array of spatial frequency values\n     TF is an array of temporal frequency values\n     P is an array with parameters:\n     ---------------------------------------------\n     | A         | Peak response of the neuron   |\n     |           |                               |\n     | zeta      | Skew of the temporal          |\n     |           | frequency tuning curve        |\n     |           |                               |\n     | xi        | Speed parameter               |\n     |           |                               |\n     | sigma_sf  | Tuning width of the neuron    |\n     |           | for spatial frequency         |\n     |           |                               |\n     | sigma_tf  | Tuning width of the neuron    |\n     |           | for temporal frequency        |\n     |           |                               |\n     | sf0       | Preferred spatial frequency   |\n     |           | averaged across temporal      |\n     |           | frequencies                   |\n     |           |                               |\n     | tf0       | Preferred temporal frequency  |\n     |           | averaged across spatial       |\n     |           | frequencies                   |\n     ---------------------------------------------\n\n   Outputs:\n     R is an array of calculated responses\n\n   Example:\n     [SF,TF] = meshgrid([0.05 0.08 0.1 0.2 0.4 0.8 1.2],[0.5 1 2 4 8 16 32]);\n     % Pick some parameters\n     A = 1;\n     zeta = 0;\n     xi = 0;\n     sigma_sf = 0.2; % Cycles per degree\n     sigma_tf = 4; % Cycles per second; this is the fall off\n     sf0 = 0.1;\n     tf0 = 4;\n     % Now calculate the responses\n     R = speed.tuningfunc(SF,TF,[A zeta xi sigma_sf sigma_tf sf0 tf0]);\n     % Now plot the responses\n     figure;\n     speed.plottuning(SF,TF,R);\n\n   See: Priebe et al. 2006\n</code></pre>"},{"location":"reference/%2Bvis/%2Bspeed/%2Btest/fittest.m/","title":"vis.speed.test.fittest","text":"<pre><code>  Demonstration script for calculating responses and fits of speed tuning\n  curve\n</code></pre>"},{"location":"reference/%2Bvis/%2Bspeed/%2Btest/responseplay.m/","title":"vis.speed.test.responseplay","text":"<pre><code>  RESPONSEPLAY - A function to demonstrate the speed tuning response function\n\n   OUT = RESPONSEPLAY()\n</code></pre>"},{"location":"reference/demos/hartley_plot_demo.m/","title":"hartley_plot_demo","text":"<pre><code>  HARTLEY_PLOT_DEMO - plot receptive fields for several Hartley reconstructions \n\n  HARTLEY_PLOT_DEMO(S, EPOCH_ID, ELEMENTS, ...)\n\n\n  Inputs: \n    S - an ndi.session object\n    EPOCHID - an epochid to plot:w\n    ELEMENTS - a cell array of ndi.element objects (type: spikes) to plot\n\n  This function also takes name/value pairs that modify its default behavior:\n  ---------------------------------------------------------------------------\n  | Parameter (default)       | Description                                 |\n  |---------------------------|---------------------------------------------|\n  | latency_xy (0.025)        | Latency (in seconds) to show in the XY      |\n  |                           |   panel.                                    |\n  | Y_axis (1/2 of height)    | Y axis plotting location                    |\n  | X_axis (1/2 of width)     | X axis plotting location                    |\n  | axis_color ([1 1 0])      | Color to use to plot axis                   |\n  | plot_individual_hartley(0)| Plot a separate figure with full XYT display|\n  | write_files (0)           | Write files to current directory            |\n  | site_map (1:N)            | Site map of electrode (1..numchannels)      |\n  ---------------------------------------------------------------------------\n</code></pre>"}]}