function [fh, nodes] = trianglePipeline(options)
% TRIANGLEPIPELINE - Create a figure demonstrating a processing pipeline
%
% [FH, NODES] = NDI.CALC.PAPERFIGURES.TRIANGLEPIPELINE(...)
%
% Creates a figure that illustrates a data processing pipeline using
% ndi.calc.paperFigures.triangleNode objects.
%
% This function can be called with name-value pairs:
%
% | Name-Value Pair | Description | Default |
% |---|---|---|
% | 'columnSpacing' | Horizontal distance between node centers | 3 |
% | 'rowSpacing' | Vertical distance between node centers | 2 |
% | 'nodeWidth' | The width of the nodes | 0.5 |
% | 'labelFontSize' | The font size of the node labels | 0.25 |
% | 'connectionColor' | The color of the connection lines | [0 0 1] |
% | 'inputTerminalColor'| The color of the input terminals | [1 0 0] |
% | 'outputTerminalColor'| The color of the output terminals| [0 1 0] |
%
% Outputs:
% | Name | Description |
% |---|---|
% | FH | The figure handle. |
% | NODES | A cell array of the ndi.calc.paperFigures.triangleNode objects. |
%
    arguments
        options.columnSpacing (1,1) {mustBeNumeric} = 3;
        options.rowSpacing (1,1) {mustBeNumeric} = 2;
        options.nodeWidth (1,1) {mustBeNumeric} = 0.5;
        options.labelFontSize (1,1) {mustBeNumeric} = 0.25;
        options.connectionColor = [0 0 1];
        options.inputTerminalColor = [1 0 0];
        options.outputTerminalColor = [0 1 0];
    end

    fh = figure();
    hold on;

    nodes = {};

    % Define positions
    c1 = 0;
    c2 = c1 + options.columnSpacing;
    c3 = c2 + options.columnSpacing;
    c4 = c3 + options.columnSpacing;
    c5 = c4 + options.columnSpacing;
    c6 = c5 + options.columnSpacing;

    r1 = 0;
    r2 = r1 - options.rowSpacing;
    r3 = r2 - options.rowSpacing;
    r4 = r3 - options.rowSpacing;
    r5 = r4 - options.rowSpacing;
    r6 = r5 - options.rowSpacing;
    r7 = r6 - options.rowSpacing;

    node_w = options.nodeWidth;

    % Row 1
    spikes = ndi.calc.paperFigures.triangleNode(...
        'shape', 'rectangle', ...
        'numberOfInputs', 0, ...
        'name', 'spikes', ...
        'position', [c1 r1], ...
        'width', node_w*3, ...
        'height', node_w*2, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = spikes;

    node2 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 2, ...
        'name', {'Select','neurons'}, ...
        'position', [c2 r1], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = node2;

    node3 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 2, ...
        'name', {'Select','epoch'}, ...
        'position', [c3 r1], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = node3;

    % Row 2
    index_node = ndi.calc.paperFigures.triangleNode(...
        'shape', 'rectangle', ...
        'name', 'index_12345', ...
        'position', [c1 r2], ...
        'width', node_w*3, ...
        'height', node_w*2, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = index_node;

    epoch_node = ndi.calc.paperFigures.triangleNode(...
        'shape', 'rectangle', ...
        'name', 'epoch_xyz', ...
        'position', [c2 r2], ...
        'width', node_w*3, ...
        'height', node_w*2, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = epoch_node;

    % Row 3
    stim_node = ndi.calc.paperFigures.triangleNode(...
        'shape', 'rectangle', ...
        'name', 'stimulator', ...
        'position', [c1 r3], ...
        'width', node_w*3, ...
        'height', node_w*2, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = stim_node;

    node7 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 2, ...
        'name', {'Select','epoch'}, ...
        'position', [c2 r3], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = node7;

    % Draw connections

    % Spikes -> Node 2 (upper)
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(spikes.outputPort, node2, 1, options.connectionColor);

    % Node 2 -> Node 3 (upper)
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(node2.outputPort, node3, 1, options.connectionColor);

    % index_12345 -> Node 2 (lower)
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(index_node.outputPort, node2, 2, options.connectionColor);

    % epoch_xyz -> Node 3 (lower)
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(epoch_node.outputPort, node3, 2, options.connectionColor);

    % epoch_xyz -> Node 7 (lower)
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(epoch_node.outputPort, node7, 2, options.connectionColor);

    % stimulator -> Node 7 (upper)
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(stim_node.outputPort, node7, 1, options.connectionColor);

    % Add the "Sort stimuli" nodes

    % Row 4
    sort_node_1 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 1, ...
        'name', {'Sort','stimuli'}, ...
        'position', [c3 r4], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = sort_node_1;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(node7.outputPort, sort_node_1, 1, options.connectionColor);

    stim_resp_node_1 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 2, ...
        'name', {'Stimulus','Responses'}, ...
        'position', [c4 r4], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = stim_resp_node_1;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(node3.outputPort, stim_resp_node_1, 1, options.connectionColor);
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(sort_node_1.outputPort, stim_resp_node_1, 2, options.connectionColor);

    fit_node_1 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 1, ...
        'name', {'Prop 1','Fit'}, ...
        'position', [c5 r4], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = fit_node_1;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(stim_resp_node_1.outputPort, fit_node_1, 1, options.connectionColor);

    plot_node_1 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 1, ...
        'name', 'Plot', ...
        'position', [c6 r4 + options.rowSpacing/2], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = plot_node_1;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(fit_node_1.outputPort, plot_node_1, 1, options.connectionColor);

    stats_node_1 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 1, ...
        'name', 'Stats', ...
        'position', [c6 r4 - options.rowSpacing/2], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = stats_node_1;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(fit_node_1.outputPort, stats_node_1, 1, options.connectionColor);

    % Row 5 (with extra space)
    r5_new = r4 - 2*options.rowSpacing;
    sort_node_2 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 1, ...
        'name', {'Sort','stimuli'}, ...
        'position', [c3 r5_new], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = sort_node_2;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(node7.outputPort, sort_node_2, 1, options.connectionColor);

    stim_resp_node_2 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 2, ...
        'name', {'Stimulus','Responses'}, ...
        'position', [c4 r5_new], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = stim_resp_node_2;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(node3.outputPort, stim_resp_node_2, 1, options.connectionColor);
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(sort_node_2.outputPort, stim_resp_node_2, 2, options.connectionColor);

    fit_node_2 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 1, ...
        'name', {'Prop 2','Fit'}, ...
        'position', [c5 r5_new], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = fit_node_2;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(stim_resp_node_2.outputPort, fit_node_2, 1, options.connectionColor);

    plot_node_2 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 1, ...
        'name', 'Plot', ...
        'position', [c6 r5_new + options.rowSpacing/2], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = plot_node_2;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(fit_node_2.outputPort, plot_node_2, 1, options.connectionColor);

    stats_node_2 = ndi.calc.paperFigures.triangleNode(...
        'shape', 'triangle', ...
        'numberOfInputs', 1, ...
        'name', 'Stats', ...
        'position', [c6 r5_new - options.rowSpacing/2], ...
        'width', node_w*3, ...
        'height', node_w*3, ...
        'titleFontSize', options.labelFontSize, ...
        'inputTerminalColor', options.inputTerminalColor, 'outputTerminalColor', options.outputTerminalColor);
    nodes{end+1} = stats_node_2;
    ndi.calc.paperFigures.triangleNode.plot_hvh_line(fit_node_2.outputPort, stats_node_2, 1, options.connectionColor);

    hold off;
    axis equal;
    axis off;

    ax = gca;
    ax.Units = 'normalized';
    ax.Position = [0.1 0.1 0.8 0.8];

    drawnow; % ensure everything is drawn

    data_range_x = xlim;
    data_range_y = ylim;

    width_cm = data_range_x(2) - data_range_x(1);
    height_cm = data_range_y(2) - data_range_y(1);

    fh.Units = 'centimeters';
    fh.Position = [fh.Position(1) fh.Position(2) width_cm/0.8 height_cm/0.8];
    fh.PaperUnits = 'centimeters';
    fh.PaperSize = [width_cm/0.8 height_cm/0.8];
    fh.PaperPosition = [0 0 width_cm/0.8 height_cm/0.8];

end % trianglePipeline()